// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for FlagType.
const (
	Boolean      FlagType = "boolean"
	Integer      FlagType = "integer"
	IntegerSlice FlagType = "integer_slice"
	Json         FlagType = "json"
	String       FlagType = "string"
	StringSlice  FlagType = "string_slice"
)

// Defines values for FilterByState.
const (
	FilterByStateActive  FilterByState = "active"
	FilterByStateAll     FilterByState = "all"
	FilterByStateDeleted FilterByState = "deleted"
)

// Defines values for PaginationSortBy.
const (
	PaginationSortByCreatedAt    PaginationSortBy = "created_at"
	PaginationSortByDefaultValue PaginationSortBy = "default_value"
	PaginationSortByDeletedAt    PaginationSortBy = "deleted_at"
	PaginationSortByEnvironment  PaginationSortBy = "environment"
	PaginationSortByName         PaginationSortBy = "name"
	PaginationSortByType         PaginationSortBy = "type"
	PaginationSortByUpdatedAt    PaginationSortBy = "updated_at"
	PaginationSortByValue        PaginationSortBy = "value"
)

// Defines values for PaginationSortDirection.
const (
	PaginationSortDirectionAsc  PaginationSortDirection = "asc"
	PaginationSortDirectionDesc PaginationSortDirection = "desc"
)

// Defines values for ListEnvironmentsParamsSortBy.
const (
	ListEnvironmentsParamsSortByCreatedAt    ListEnvironmentsParamsSortBy = "created_at"
	ListEnvironmentsParamsSortByDefaultValue ListEnvironmentsParamsSortBy = "default_value"
	ListEnvironmentsParamsSortByDeletedAt    ListEnvironmentsParamsSortBy = "deleted_at"
	ListEnvironmentsParamsSortByEnvironment  ListEnvironmentsParamsSortBy = "environment"
	ListEnvironmentsParamsSortByName         ListEnvironmentsParamsSortBy = "name"
	ListEnvironmentsParamsSortByType         ListEnvironmentsParamsSortBy = "type"
	ListEnvironmentsParamsSortByUpdatedAt    ListEnvironmentsParamsSortBy = "updated_at"
	ListEnvironmentsParamsSortByValue        ListEnvironmentsParamsSortBy = "value"
)

// Defines values for ListEnvironmentsParamsSortDirection.
const (
	ListEnvironmentsParamsSortDirectionAsc  ListEnvironmentsParamsSortDirection = "asc"
	ListEnvironmentsParamsSortDirectionDesc ListEnvironmentsParamsSortDirection = "desc"
)

// Defines values for ListEnvironmentsParamsState.
const (
	ListEnvironmentsParamsStateActive  ListEnvironmentsParamsState = "active"
	ListEnvironmentsParamsStateAll     ListEnvironmentsParamsState = "all"
	ListEnvironmentsParamsStateDeleted ListEnvironmentsParamsState = "deleted"
)

// Defines values for BulkFlagsParamsSortBy.
const (
	BulkFlagsParamsSortByCreatedAt    BulkFlagsParamsSortBy = "created_at"
	BulkFlagsParamsSortByDefaultValue BulkFlagsParamsSortBy = "default_value"
	BulkFlagsParamsSortByDeletedAt    BulkFlagsParamsSortBy = "deleted_at"
	BulkFlagsParamsSortByEnvironment  BulkFlagsParamsSortBy = "environment"
	BulkFlagsParamsSortByName         BulkFlagsParamsSortBy = "name"
	BulkFlagsParamsSortByType         BulkFlagsParamsSortBy = "type"
	BulkFlagsParamsSortByUpdatedAt    BulkFlagsParamsSortBy = "updated_at"
	BulkFlagsParamsSortByValue        BulkFlagsParamsSortBy = "value"
)

// Defines values for BulkFlagsParamsSortDirection.
const (
	Asc  BulkFlagsParamsSortDirection = "asc"
	Desc BulkFlagsParamsSortDirection = "desc"
)

// Defines values for BulkFlagsParamsState.
const (
	Active  BulkFlagsParamsState = "active"
	All     BulkFlagsParamsState = "all"
	Deleted BulkFlagsParamsState = "deleted"
)

// Environment defines model for environment.
type Environment struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	DeletedAt *time.Time `json:"deleted_at"`
	Flags     []Flag     `json:"flags"`
	Id        *int64     `json:"id,omitempty"`
	Name      string     `json:"name"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// EnvironmentFlag defines model for environment_flag.
type EnvironmentFlag struct {
	Name  string   `json:"name"`
	Type  FlagType `json:"type"`
	Value string   `json:"value"`
}

// ErrorBody defines model for error_body.
type ErrorBody struct {
	// Error Error message describing the issue
	Error     *string `json:"error,omitempty"`
	ErrorCode *int    `json:"error_code,omitempty"`
}

// Flag defines model for flag.
type Flag struct {
	CreatedAt    *time.Time `json:"created_at,omitempty"`
	DefaultValue string     `json:"default_value"`
	DeletedAt    *time.Time `json:"deleted_at"`
	Environments *[]struct {
		EnvironmentName string `json:"environment_name"`
		FlagValue       string `json:"flag_value"`
	} `json:"environments,omitempty"`
	FlagType  *FlagType  `json:"flag_type,omitempty"`
	Id        *int64     `json:"id,omitempty"`
	Name      string     `json:"name"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// FlagType defines model for flag_type.
type FlagType string

// EnvironmentName defines model for environment_name.
type EnvironmentName = string

// File defines model for file.
type File = string

// FilterByEnvironment defines model for filter_by_environment.
type FilterByEnvironment = string

// FilterByName defines model for filter_by_name.
type FilterByName = string

// FilterByState defines model for filter_by_state.
type FilterByState string

// FilterByType defines model for filter_by_type.
type FilterByType = FlagType

// FlagId defines model for flag_id.
type FlagId = int64

// PaginationPageNumber defines model for pagination_page_number.
type PaginationPageNumber = int

// PaginationPageSize defines model for pagination_page_size.
type PaginationPageSize = int

// PaginationSortBy defines model for pagination_sort_by.
type PaginationSortBy string

// PaginationSortDirection defines model for pagination_sort_direction.
type PaginationSortDirection string

// ListEnvironmentsParams defines parameters for ListEnvironments.
type ListEnvironmentsParams struct {
	// Page Page number for pagination. Defaults to 1 if not provided. Must be a positive integer.
	Page *PaginationPageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page for pagination. Valid values range from 1-1000. Defaults to 100 if not provided.
	Size *PaginationPageSize `form:"size,omitempty" json:"size,omitempty"`

	// SortBy Sort by field for the pagination. If not provided, defaults to 'name'.
	SortBy *ListEnvironmentsParamsSortBy `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// SortDirection Sort direction for the pagination. If not provided, defaults to 'asc'.
	SortDirection *ListEnvironmentsParamsSortDirection `form:"sort_direction,omitempty" json:"sort_direction,omitempty"`

	// Name Filter records by with the provided string in the name. If not provided, no name filtering is applied.
	Name *FilterByName `form:"name,omitempty" json:"name,omitempty"`

	// Type Filter records by type. If not provided, no type filtering is applied.
	Type *FilterByType `form:"type,omitempty" json:"type,omitempty"`

	// State Filter records by state. 'active' for non-deleted records, 'deleted' for soft-deleted records, 'all' for both. Defaults to 'active'
	State *ListEnvironmentsParamsState `form:"state,omitempty" json:"state,omitempty"`
}

// ListEnvironmentsParamsSortBy defines parameters for ListEnvironments.
type ListEnvironmentsParamsSortBy string

// ListEnvironmentsParamsSortDirection defines parameters for ListEnvironments.
type ListEnvironmentsParamsSortDirection string

// ListEnvironmentsParamsState defines parameters for ListEnvironments.
type ListEnvironmentsParamsState string

// CreateEnvironmentJSONBody defines parameters for CreateEnvironment.
type CreateEnvironmentJSONBody struct {
	// Name The name of the environment
	Name string `json:"name"`
}

// BulkFlagsParams defines parameters for BulkFlags.
type BulkFlagsParams struct {
	// Page Page number for pagination. Defaults to 1 if not provided. Must be a positive integer.
	Page *PaginationPageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page for pagination. Valid values range from 1-1000. Defaults to 100 if not provided.
	Size *PaginationPageSize `form:"size,omitempty" json:"size,omitempty"`

	// SortBy Sort by field for the pagination. If not provided, defaults to 'name'.
	SortBy *BulkFlagsParamsSortBy `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// SortDirection Sort direction for the pagination. If not provided, defaults to 'asc'.
	SortDirection *BulkFlagsParamsSortDirection `form:"sort_direction,omitempty" json:"sort_direction,omitempty"`

	// Name Filter records by with the provided string in the name. If not provided, no name filtering is applied.
	Name *FilterByName `form:"name,omitempty" json:"name,omitempty"`

	// Type Filter records by type. If not provided, no type filtering is applied.
	Type *FilterByType `form:"type,omitempty" json:"type,omitempty"`

	// Environment Filter records by environment name. If not provided, no environment filtering is applied.
	Environment *FilterByEnvironment `form:"environment,omitempty" json:"environment,omitempty"`

	// State Filter records by state. 'active' for non-deleted records, 'deleted' for soft-deleted records, 'all' for both. Defaults to 'active'
	State *BulkFlagsParamsState `form:"state,omitempty" json:"state,omitempty"`
}

// BulkFlagsParamsSortBy defines parameters for BulkFlags.
type BulkFlagsParamsSortBy string

// BulkFlagsParamsSortDirection defines parameters for BulkFlags.
type BulkFlagsParamsSortDirection string

// BulkFlagsParamsState defines parameters for BulkFlags.
type BulkFlagsParamsState string

// CreateEnvironmentJSONRequestBody defines body for CreateEnvironment for application/json ContentType.
type CreateEnvironmentJSONRequestBody CreateEnvironmentJSONBody

// UpdateEnvironmentFlagValueJSONRequestBody defines body for UpdateEnvironmentFlagValue for application/json ContentType.
type UpdateEnvironmentFlagValueJSONRequestBody = EnvironmentFlag

// CreateFlagJSONRequestBody defines body for CreateFlag for application/json ContentType.
type CreateFlagJSONRequestBody = Flag

// UpdateFlagJSONRequestBody defines body for UpdateFlag for application/json ContentType.
type UpdateFlagJSONRequestBody = Flag

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List environments
	// (GET /api/environment)
	ListEnvironments(w http.ResponseWriter, r *http.Request, params ListEnvironmentsParams)
	// Check the options for the endpoint
	// (OPTIONS /api/environment)
	OptionsEnvironment(w http.ResponseWriter, r *http.Request)
	// Create a new environment
	// (POST /api/environment)
	CreateEnvironment(w http.ResponseWriter, r *http.Request)
	// Delete an environment
	// (DELETE /api/environment/{environment_name})
	DeleteEnvironment(w http.ResponseWriter, r *http.Request, environmentName EnvironmentName)
	// Check the options for the endpoint
	// (OPTIONS /api/environment/{environment_name})
	OptionsEnvironmentName(w http.ResponseWriter, r *http.Request, environmentName EnvironmentName)
	// Get flags by environment
	// (GET /api/environment/{environment_name}/flag)
	GetFlagsByEnvironment(w http.ResponseWriter, r *http.Request, environmentName EnvironmentName)
	// Check the options for the endpoint
	// (OPTIONS /api/environment/{environment_name}/flag)
	OptionsEnvironmentNameFlag(w http.ResponseWriter, r *http.Request, environmentName EnvironmentName)
	// Check the options for the endpoint
	// (OPTIONS /api/environment/{environment_name}/flag/{flag_id})
	OptionsEnvironmentNameFlagId(w http.ResponseWriter, r *http.Request, environmentName EnvironmentName, flagId FlagId)
	// Update a flag in an environment
	// (PUT /api/environment/{environment_name}/flag/{flag_id})
	UpdateEnvironmentFlagValue(w http.ResponseWriter, r *http.Request, environmentName EnvironmentName, flagId FlagId)
	// Get bulk list of flags
	// (GET /api/flag)
	BulkFlags(w http.ResponseWriter, r *http.Request, params BulkFlagsParams)
	// Check the options for the endpoint
	// (OPTIONS /api/flag)
	OptionsFlag(w http.ResponseWriter, r *http.Request)
	// Create a new flag
	// (POST /api/flag)
	CreateFlag(w http.ResponseWriter, r *http.Request)
	// Delete a flag
	// (DELETE /api/flag/{flag_id})
	DeleteFlag(w http.ResponseWriter, r *http.Request, flagId FlagId)
	// Check the options for the endpoint
	// (OPTIONS /api/flag/{flag_id})
	OptionsFlagId(w http.ResponseWriter, r *http.Request, flagId FlagId)
	// Update a flag
	// (PUT /api/flag/{flag_id})
	UpdateFlag(w http.ResponseWriter, r *http.Request, flagId FlagId)
	// Get health status
	// (GET /healthcheck)
	HealthCheck(w http.ResponseWriter, r *http.Request)
	// Check the options for the endpoint
	// (OPTIONS /healthcheck)
	OptionsHealthCheck(w http.ResponseWriter, r *http.Request)
	// Get the index.html for the UI
	// (GET /ui)
	GetUiIndex(w http.ResponseWriter, r *http.Request)
	// Check the options for the endpoint
	// (OPTIONS /ui)
	OptionsUi(w http.ResponseWriter, r *http.Request)
	// Get the static files for the UI
	// (GET /ui/{file})
	GetUiFile(w http.ResponseWriter, r *http.Request, file File)
	// Check the options for the endpoint
	// (OPTIONS /ui/{file})
	OptionsUiFile(w http.ResponseWriter, r *http.Request, file File)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListEnvironments operation middleware
func (siw *ServerInterfaceWrapper) ListEnvironments(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEnvironmentsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", r.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort_by", Err: err})
		return
	}

	// ------------- Optional query parameter "sort_direction" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_direction", r.URL.Query(), &params.SortDirection)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort_direction", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEnvironments(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsEnvironment operation middleware
func (siw *ServerInterfaceWrapper) OptionsEnvironment(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsEnvironment(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateEnvironment operation middleware
func (siw *ServerInterfaceWrapper) CreateEnvironment(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEnvironment(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteEnvironment operation middleware
func (siw *ServerInterfaceWrapper) DeleteEnvironment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "environment_name" -------------
	var environmentName EnvironmentName

	err = runtime.BindStyledParameterWithOptions("simple", "environment_name", mux.Vars(r)["environment_name"], &environmentName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment_name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteEnvironment(w, r, environmentName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsEnvironmentName operation middleware
func (siw *ServerInterfaceWrapper) OptionsEnvironmentName(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "environment_name" -------------
	var environmentName EnvironmentName

	err = runtime.BindStyledParameterWithOptions("simple", "environment_name", mux.Vars(r)["environment_name"], &environmentName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment_name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsEnvironmentName(w, r, environmentName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetFlagsByEnvironment operation middleware
func (siw *ServerInterfaceWrapper) GetFlagsByEnvironment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "environment_name" -------------
	var environmentName EnvironmentName

	err = runtime.BindStyledParameterWithOptions("simple", "environment_name", mux.Vars(r)["environment_name"], &environmentName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment_name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFlagsByEnvironment(w, r, environmentName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsEnvironmentNameFlag operation middleware
func (siw *ServerInterfaceWrapper) OptionsEnvironmentNameFlag(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "environment_name" -------------
	var environmentName EnvironmentName

	err = runtime.BindStyledParameterWithOptions("simple", "environment_name", mux.Vars(r)["environment_name"], &environmentName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment_name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsEnvironmentNameFlag(w, r, environmentName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsEnvironmentNameFlagId operation middleware
func (siw *ServerInterfaceWrapper) OptionsEnvironmentNameFlagId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "environment_name" -------------
	var environmentName EnvironmentName

	err = runtime.BindStyledParameterWithOptions("simple", "environment_name", mux.Vars(r)["environment_name"], &environmentName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment_name", Err: err})
		return
	}

	// ------------- Path parameter "flag_id" -------------
	var flagId FlagId

	err = runtime.BindStyledParameterWithOptions("simple", "flag_id", mux.Vars(r)["flag_id"], &flagId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flag_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsEnvironmentNameFlagId(w, r, environmentName, flagId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateEnvironmentFlagValue operation middleware
func (siw *ServerInterfaceWrapper) UpdateEnvironmentFlagValue(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "environment_name" -------------
	var environmentName EnvironmentName

	err = runtime.BindStyledParameterWithOptions("simple", "environment_name", mux.Vars(r)["environment_name"], &environmentName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment_name", Err: err})
		return
	}

	// ------------- Path parameter "flag_id" -------------
	var flagId FlagId

	err = runtime.BindStyledParameterWithOptions("simple", "flag_id", mux.Vars(r)["flag_id"], &flagId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flag_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateEnvironmentFlagValue(w, r, environmentName, flagId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// BulkFlags operation middleware
func (siw *ServerInterfaceWrapper) BulkFlags(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params BulkFlagsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", r.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort_by", Err: err})
		return
	}

	// ------------- Optional query parameter "sort_direction" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_direction", r.URL.Query(), &params.SortDirection)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort_direction", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "environment" -------------

	err = runtime.BindQueryParameter("form", true, false, "environment", r.URL.Query(), &params.Environment)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment", Err: err})
		return
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BulkFlags(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsFlag operation middleware
func (siw *ServerInterfaceWrapper) OptionsFlag(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsFlag(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateFlag operation middleware
func (siw *ServerInterfaceWrapper) CreateFlag(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFlag(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteFlag operation middleware
func (siw *ServerInterfaceWrapper) DeleteFlag(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "flag_id" -------------
	var flagId FlagId

	err = runtime.BindStyledParameterWithOptions("simple", "flag_id", mux.Vars(r)["flag_id"], &flagId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flag_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFlag(w, r, flagId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsFlagId operation middleware
func (siw *ServerInterfaceWrapper) OptionsFlagId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "flag_id" -------------
	var flagId FlagId

	err = runtime.BindStyledParameterWithOptions("simple", "flag_id", mux.Vars(r)["flag_id"], &flagId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flag_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsFlagId(w, r, flagId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateFlag operation middleware
func (siw *ServerInterfaceWrapper) UpdateFlag(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "flag_id" -------------
	var flagId FlagId

	err = runtime.BindStyledParameterWithOptions("simple", "flag_id", mux.Vars(r)["flag_id"], &flagId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flag_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateFlag(w, r, flagId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HealthCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsHealthCheck operation middleware
func (siw *ServerInterfaceWrapper) OptionsHealthCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsHealthCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUiIndex operation middleware
func (siw *ServerInterfaceWrapper) GetUiIndex(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUiIndex(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsUi operation middleware
func (siw *ServerInterfaceWrapper) OptionsUi(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsUi(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUiFile operation middleware
func (siw *ServerInterfaceWrapper) GetUiFile(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "file" -------------
	var file File

	err = runtime.BindStyledParameterWithOptions("simple", "file", mux.Vars(r)["file"], &file, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUiFile(w, r, file)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsUiFile operation middleware
func (siw *ServerInterfaceWrapper) OptionsUiFile(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "file" -------------
	var file File

	err = runtime.BindStyledParameterWithOptions("simple", "file", mux.Vars(r)["file"], &file, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsUiFile(w, r, file)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/api/environment", wrapper.ListEnvironments).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/environment", wrapper.OptionsEnvironment).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/api/environment", wrapper.CreateEnvironment).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/environment/{environment_name}", wrapper.DeleteEnvironment).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/environment/{environment_name}", wrapper.OptionsEnvironmentName).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/api/environment/{environment_name}/flag", wrapper.GetFlagsByEnvironment).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/environment/{environment_name}/flag", wrapper.OptionsEnvironmentNameFlag).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/api/environment/{environment_name}/flag/{flag_id}", wrapper.OptionsEnvironmentNameFlagId).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/api/environment/{environment_name}/flag/{flag_id}", wrapper.UpdateEnvironmentFlagValue).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/api/flag", wrapper.BulkFlags).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/flag", wrapper.OptionsFlag).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/api/flag", wrapper.CreateFlag).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/flag/{flag_id}", wrapper.DeleteFlag).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/flag/{flag_id}", wrapper.OptionsFlagId).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/api/flag/{flag_id}", wrapper.UpdateFlag).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/healthcheck", wrapper.HealthCheck).Methods("GET")

	r.HandleFunc(options.BaseURL+"/healthcheck", wrapper.OptionsHealthCheck).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/ui", wrapper.GetUiIndex).Methods("GET")

	r.HandleFunc(options.BaseURL+"/ui", wrapper.OptionsUi).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/ui/{file}", wrapper.GetUiFile).Methods("GET")

	r.HandleFunc(options.BaseURL+"/ui/{file}", wrapper.OptionsUiFile).Methods("OPTIONS")

	return r
}

type ListEnvironmentsRequestObject struct {
	Params ListEnvironmentsParams
}

type ListEnvironmentsResponseObject interface {
	VisitListEnvironmentsResponse(w http.ResponseWriter) error
}

type ListEnvironments200JSONResponse []Flag

func (response ListEnvironments200JSONResponse) VisitListEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListEnvironments400JSONResponse struct {
	Error *string `json:"error,omitempty"`
}

func (response ListEnvironments400JSONResponse) VisitListEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListEnvironments401JSONResponse ErrorBody

func (response ListEnvironments401JSONResponse) VisitListEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListEnvironments403JSONResponse ErrorBody

func (response ListEnvironments403JSONResponse) VisitListEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListEnvironments406JSONResponse ErrorBody

func (response ListEnvironments406JSONResponse) VisitListEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type ListEnvironments500JSONResponse ErrorBody

func (response ListEnvironments500JSONResponse) VisitListEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type OptionsEnvironmentRequestObject struct {
}

type OptionsEnvironmentResponseObject interface {
	VisitOptionsEnvironmentResponse(w http.ResponseWriter) error
}

type OptionsEnvironment200Response struct {
}

func (response OptionsEnvironment200Response) VisitOptionsEnvironmentResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type CreateEnvironmentRequestObject struct {
	Body *CreateEnvironmentJSONRequestBody
}

type CreateEnvironmentResponseObject interface {
	VisitCreateEnvironmentResponse(w http.ResponseWriter) error
}

type CreateEnvironment201JSONResponse Environment

func (response CreateEnvironment201JSONResponse) VisitCreateEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateEnvironment400JSONResponse struct {
	Error *string `json:"error,omitempty"`
}

func (response CreateEnvironment400JSONResponse) VisitCreateEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateEnvironment401JSONResponse ErrorBody

func (response CreateEnvironment401JSONResponse) VisitCreateEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateEnvironment403JSONResponse ErrorBody

func (response CreateEnvironment403JSONResponse) VisitCreateEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateEnvironment409JSONResponse ErrorBody

func (response CreateEnvironment409JSONResponse) VisitCreateEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateEnvironment500JSONResponse ErrorBody

func (response CreateEnvironment500JSONResponse) VisitCreateEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEnvironmentRequestObject struct {
	EnvironmentName EnvironmentName `json:"environment_name"`
}

type DeleteEnvironmentResponseObject interface {
	VisitDeleteEnvironmentResponse(w http.ResponseWriter) error
}

type DeleteEnvironment204Response struct {
}

func (response DeleteEnvironment204Response) VisitDeleteEnvironmentResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteEnvironment401JSONResponse ErrorBody

func (response DeleteEnvironment401JSONResponse) VisitDeleteEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEnvironment403JSONResponse ErrorBody

func (response DeleteEnvironment403JSONResponse) VisitDeleteEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEnvironment406JSONResponse ErrorBody

func (response DeleteEnvironment406JSONResponse) VisitDeleteEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEnvironment500JSONResponse ErrorBody

func (response DeleteEnvironment500JSONResponse) VisitDeleteEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type OptionsEnvironmentNameRequestObject struct {
	EnvironmentName EnvironmentName `json:"environment_name"`
}

type OptionsEnvironmentNameResponseObject interface {
	VisitOptionsEnvironmentNameResponse(w http.ResponseWriter) error
}

type OptionsEnvironmentName200Response struct {
}

func (response OptionsEnvironmentName200Response) VisitOptionsEnvironmentNameResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetFlagsByEnvironmentRequestObject struct {
	EnvironmentName EnvironmentName `json:"environment_name"`
}

type GetFlagsByEnvironmentResponseObject interface {
	VisitGetFlagsByEnvironmentResponse(w http.ResponseWriter) error
}

type GetFlagsByEnvironment200JSONResponse []EnvironmentFlag

func (response GetFlagsByEnvironment200JSONResponse) VisitGetFlagsByEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFlagsByEnvironment401JSONResponse ErrorBody

func (response GetFlagsByEnvironment401JSONResponse) VisitGetFlagsByEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetFlagsByEnvironment403JSONResponse ErrorBody

func (response GetFlagsByEnvironment403JSONResponse) VisitGetFlagsByEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetFlagsByEnvironment406JSONResponse ErrorBody

func (response GetFlagsByEnvironment406JSONResponse) VisitGetFlagsByEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type GetFlagsByEnvironment500JSONResponse ErrorBody

func (response GetFlagsByEnvironment500JSONResponse) VisitGetFlagsByEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type OptionsEnvironmentNameFlagRequestObject struct {
	EnvironmentName EnvironmentName `json:"environment_name"`
}

type OptionsEnvironmentNameFlagResponseObject interface {
	VisitOptionsEnvironmentNameFlagResponse(w http.ResponseWriter) error
}

type OptionsEnvironmentNameFlag200Response struct {
}

func (response OptionsEnvironmentNameFlag200Response) VisitOptionsEnvironmentNameFlagResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type OptionsEnvironmentNameFlagIdRequestObject struct {
	EnvironmentName EnvironmentName `json:"environment_name"`
	FlagId          FlagId          `json:"flag_id"`
}

type OptionsEnvironmentNameFlagIdResponseObject interface {
	VisitOptionsEnvironmentNameFlagIdResponse(w http.ResponseWriter) error
}

type OptionsEnvironmentNameFlagId200Response struct {
}

func (response OptionsEnvironmentNameFlagId200Response) VisitOptionsEnvironmentNameFlagIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateEnvironmentFlagValueRequestObject struct {
	EnvironmentName EnvironmentName `json:"environment_name"`
	FlagId          FlagId          `json:"flag_id"`
	Body            *UpdateEnvironmentFlagValueJSONRequestBody
}

type UpdateEnvironmentFlagValueResponseObject interface {
	VisitUpdateEnvironmentFlagValueResponse(w http.ResponseWriter) error
}

type UpdateEnvironmentFlagValue200JSONResponse Flag

func (response UpdateEnvironmentFlagValue200JSONResponse) VisitUpdateEnvironmentFlagValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateEnvironmentFlagValue400JSONResponse ErrorBody

func (response UpdateEnvironmentFlagValue400JSONResponse) VisitUpdateEnvironmentFlagValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateEnvironmentFlagValue401JSONResponse ErrorBody

func (response UpdateEnvironmentFlagValue401JSONResponse) VisitUpdateEnvironmentFlagValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateEnvironmentFlagValue403JSONResponse ErrorBody

func (response UpdateEnvironmentFlagValue403JSONResponse) VisitUpdateEnvironmentFlagValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateEnvironmentFlagValue406JSONResponse ErrorBody

func (response UpdateEnvironmentFlagValue406JSONResponse) VisitUpdateEnvironmentFlagValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type UpdateEnvironmentFlagValue500JSONResponse ErrorBody

func (response UpdateEnvironmentFlagValue500JSONResponse) VisitUpdateEnvironmentFlagValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type BulkFlagsRequestObject struct {
	Params BulkFlagsParams
}

type BulkFlagsResponseObject interface {
	VisitBulkFlagsResponse(w http.ResponseWriter) error
}

type BulkFlags200JSONResponse []Flag

func (response BulkFlags200JSONResponse) VisitBulkFlagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type BulkFlags400JSONResponse struct {
	Error *string `json:"error,omitempty"`
}

func (response BulkFlags400JSONResponse) VisitBulkFlagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type BulkFlags401JSONResponse ErrorBody

func (response BulkFlags401JSONResponse) VisitBulkFlagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type BulkFlags403JSONResponse ErrorBody

func (response BulkFlags403JSONResponse) VisitBulkFlagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type BulkFlags406JSONResponse ErrorBody

func (response BulkFlags406JSONResponse) VisitBulkFlagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type BulkFlags500JSONResponse ErrorBody

func (response BulkFlags500JSONResponse) VisitBulkFlagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type OptionsFlagRequestObject struct {
}

type OptionsFlagResponseObject interface {
	VisitOptionsFlagResponse(w http.ResponseWriter) error
}

type OptionsFlag200Response struct {
}

func (response OptionsFlag200Response) VisitOptionsFlagResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type CreateFlagRequestObject struct {
	Body *CreateFlagJSONRequestBody
}

type CreateFlagResponseObject interface {
	VisitCreateFlagResponse(w http.ResponseWriter) error
}

type CreateFlag201JSONResponse Flag

func (response CreateFlag201JSONResponse) VisitCreateFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateFlag400JSONResponse struct {
	Error *string `json:"error,omitempty"`
}

func (response CreateFlag400JSONResponse) VisitCreateFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateFlag401JSONResponse ErrorBody

func (response CreateFlag401JSONResponse) VisitCreateFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateFlag403JSONResponse ErrorBody

func (response CreateFlag403JSONResponse) VisitCreateFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateFlag409JSONResponse ErrorBody

func (response CreateFlag409JSONResponse) VisitCreateFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateFlag500JSONResponse ErrorBody

func (response CreateFlag500JSONResponse) VisitCreateFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFlagRequestObject struct {
	FlagId FlagId `json:"flag_id"`
}

type DeleteFlagResponseObject interface {
	VisitDeleteFlagResponse(w http.ResponseWriter) error
}

type DeleteFlag204Response struct {
}

func (response DeleteFlag204Response) VisitDeleteFlagResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteFlag401JSONResponse ErrorBody

func (response DeleteFlag401JSONResponse) VisitDeleteFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFlag403JSONResponse ErrorBody

func (response DeleteFlag403JSONResponse) VisitDeleteFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFlag406JSONResponse ErrorBody

func (response DeleteFlag406JSONResponse) VisitDeleteFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFlag500JSONResponse ErrorBody

func (response DeleteFlag500JSONResponse) VisitDeleteFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type OptionsFlagIdRequestObject struct {
	FlagId FlagId `json:"flag_id"`
}

type OptionsFlagIdResponseObject interface {
	VisitOptionsFlagIdResponse(w http.ResponseWriter) error
}

type OptionsFlagId200Response struct {
}

func (response OptionsFlagId200Response) VisitOptionsFlagIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateFlagRequestObject struct {
	FlagId FlagId `json:"flag_id"`
	Body   *UpdateFlagJSONRequestBody
}

type UpdateFlagResponseObject interface {
	VisitUpdateFlagResponse(w http.ResponseWriter) error
}

type UpdateFlag200JSONResponse Flag

func (response UpdateFlag200JSONResponse) VisitUpdateFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFlag400JSONResponse struct {
	Error *string `json:"error,omitempty"`
}

func (response UpdateFlag400JSONResponse) VisitUpdateFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFlag401JSONResponse ErrorBody

func (response UpdateFlag401JSONResponse) VisitUpdateFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFlag403JSONResponse ErrorBody

func (response UpdateFlag403JSONResponse) VisitUpdateFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFlag406JSONResponse ErrorBody

func (response UpdateFlag406JSONResponse) VisitUpdateFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFlag500JSONResponse ErrorBody

func (response UpdateFlag500JSONResponse) VisitUpdateFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type HealthCheckRequestObject struct {
}

type HealthCheckResponseObject interface {
	VisitHealthCheckResponse(w http.ResponseWriter) error
}

type HealthCheck200Response struct {
}

func (response HealthCheck200Response) VisitHealthCheckResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type HealthCheck500JSONResponse ErrorBody

func (response HealthCheck500JSONResponse) VisitHealthCheckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type OptionsHealthCheckRequestObject struct {
}

type OptionsHealthCheckResponseObject interface {
	VisitOptionsHealthCheckResponse(w http.ResponseWriter) error
}

type OptionsHealthCheck200Response struct {
}

func (response OptionsHealthCheck200Response) VisitOptionsHealthCheckResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetUiIndexRequestObject struct {
}

type GetUiIndexResponseObject interface {
	VisitGetUiIndexResponse(w http.ResponseWriter) error
}

type GetUiIndex200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetUiIndex200TexthtmlResponse) VisitGetUiIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetUiIndex500JSONResponse ErrorBody

func (response GetUiIndex500JSONResponse) VisitGetUiIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type OptionsUiRequestObject struct {
}

type OptionsUiResponseObject interface {
	VisitOptionsUiResponse(w http.ResponseWriter) error
}

type OptionsUi200Response struct {
}

func (response OptionsUi200Response) VisitOptionsUiResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetUiFileRequestObject struct {
	File File `json:"file"`
}

type GetUiFileResponseObject interface {
	VisitGetUiFileResponse(w http.ResponseWriter) error
}

type GetUiFile200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetUiFile200TexthtmlResponse) VisitGetUiFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetUiFile404JSONResponse ErrorBody

func (response GetUiFile404JSONResponse) VisitGetUiFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUiFile500JSONResponse ErrorBody

func (response GetUiFile500JSONResponse) VisitGetUiFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type OptionsUiFileRequestObject struct {
	File File `json:"file"`
}

type OptionsUiFileResponseObject interface {
	VisitOptionsUiFileResponse(w http.ResponseWriter) error
}

type OptionsUiFile200Response struct {
}

func (response OptionsUiFile200Response) VisitOptionsUiFileResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List environments
	// (GET /api/environment)
	ListEnvironments(ctx context.Context, request ListEnvironmentsRequestObject) (ListEnvironmentsResponseObject, error)
	// Check the options for the endpoint
	// (OPTIONS /api/environment)
	OptionsEnvironment(ctx context.Context, request OptionsEnvironmentRequestObject) (OptionsEnvironmentResponseObject, error)
	// Create a new environment
	// (POST /api/environment)
	CreateEnvironment(ctx context.Context, request CreateEnvironmentRequestObject) (CreateEnvironmentResponseObject, error)
	// Delete an environment
	// (DELETE /api/environment/{environment_name})
	DeleteEnvironment(ctx context.Context, request DeleteEnvironmentRequestObject) (DeleteEnvironmentResponseObject, error)
	// Check the options for the endpoint
	// (OPTIONS /api/environment/{environment_name})
	OptionsEnvironmentName(ctx context.Context, request OptionsEnvironmentNameRequestObject) (OptionsEnvironmentNameResponseObject, error)
	// Get flags by environment
	// (GET /api/environment/{environment_name}/flag)
	GetFlagsByEnvironment(ctx context.Context, request GetFlagsByEnvironmentRequestObject) (GetFlagsByEnvironmentResponseObject, error)
	// Check the options for the endpoint
	// (OPTIONS /api/environment/{environment_name}/flag)
	OptionsEnvironmentNameFlag(ctx context.Context, request OptionsEnvironmentNameFlagRequestObject) (OptionsEnvironmentNameFlagResponseObject, error)
	// Check the options for the endpoint
	// (OPTIONS /api/environment/{environment_name}/flag/{flag_id})
	OptionsEnvironmentNameFlagId(ctx context.Context, request OptionsEnvironmentNameFlagIdRequestObject) (OptionsEnvironmentNameFlagIdResponseObject, error)
	// Update a flag in an environment
	// (PUT /api/environment/{environment_name}/flag/{flag_id})
	UpdateEnvironmentFlagValue(ctx context.Context, request UpdateEnvironmentFlagValueRequestObject) (UpdateEnvironmentFlagValueResponseObject, error)
	// Get bulk list of flags
	// (GET /api/flag)
	BulkFlags(ctx context.Context, request BulkFlagsRequestObject) (BulkFlagsResponseObject, error)
	// Check the options for the endpoint
	// (OPTIONS /api/flag)
	OptionsFlag(ctx context.Context, request OptionsFlagRequestObject) (OptionsFlagResponseObject, error)
	// Create a new flag
	// (POST /api/flag)
	CreateFlag(ctx context.Context, request CreateFlagRequestObject) (CreateFlagResponseObject, error)
	// Delete a flag
	// (DELETE /api/flag/{flag_id})
	DeleteFlag(ctx context.Context, request DeleteFlagRequestObject) (DeleteFlagResponseObject, error)
	// Check the options for the endpoint
	// (OPTIONS /api/flag/{flag_id})
	OptionsFlagId(ctx context.Context, request OptionsFlagIdRequestObject) (OptionsFlagIdResponseObject, error)
	// Update a flag
	// (PUT /api/flag/{flag_id})
	UpdateFlag(ctx context.Context, request UpdateFlagRequestObject) (UpdateFlagResponseObject, error)
	// Get health status
	// (GET /healthcheck)
	HealthCheck(ctx context.Context, request HealthCheckRequestObject) (HealthCheckResponseObject, error)
	// Check the options for the endpoint
	// (OPTIONS /healthcheck)
	OptionsHealthCheck(ctx context.Context, request OptionsHealthCheckRequestObject) (OptionsHealthCheckResponseObject, error)
	// Get the index.html for the UI
	// (GET /ui)
	GetUiIndex(ctx context.Context, request GetUiIndexRequestObject) (GetUiIndexResponseObject, error)
	// Check the options for the endpoint
	// (OPTIONS /ui)
	OptionsUi(ctx context.Context, request OptionsUiRequestObject) (OptionsUiResponseObject, error)
	// Get the static files for the UI
	// (GET /ui/{file})
	GetUiFile(ctx context.Context, request GetUiFileRequestObject) (GetUiFileResponseObject, error)
	// Check the options for the endpoint
	// (OPTIONS /ui/{file})
	OptionsUiFile(ctx context.Context, request OptionsUiFileRequestObject) (OptionsUiFileResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListEnvironments operation middleware
func (sh *strictHandler) ListEnvironments(w http.ResponseWriter, r *http.Request, params ListEnvironmentsParams) {
	var request ListEnvironmentsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListEnvironments(ctx, request.(ListEnvironmentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListEnvironments")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListEnvironmentsResponseObject); ok {
		if err := validResponse.VisitListEnvironmentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// OptionsEnvironment operation middleware
func (sh *strictHandler) OptionsEnvironment(w http.ResponseWriter, r *http.Request) {
	var request OptionsEnvironmentRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OptionsEnvironment(ctx, request.(OptionsEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OptionsEnvironment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OptionsEnvironmentResponseObject); ok {
		if err := validResponse.VisitOptionsEnvironmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateEnvironment operation middleware
func (sh *strictHandler) CreateEnvironment(w http.ResponseWriter, r *http.Request) {
	var request CreateEnvironmentRequestObject

	var body CreateEnvironmentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateEnvironment(ctx, request.(CreateEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateEnvironment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateEnvironmentResponseObject); ok {
		if err := validResponse.VisitCreateEnvironmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteEnvironment operation middleware
func (sh *strictHandler) DeleteEnvironment(w http.ResponseWriter, r *http.Request, environmentName EnvironmentName) {
	var request DeleteEnvironmentRequestObject

	request.EnvironmentName = environmentName

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteEnvironment(ctx, request.(DeleteEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteEnvironment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteEnvironmentResponseObject); ok {
		if err := validResponse.VisitDeleteEnvironmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// OptionsEnvironmentName operation middleware
func (sh *strictHandler) OptionsEnvironmentName(w http.ResponseWriter, r *http.Request, environmentName EnvironmentName) {
	var request OptionsEnvironmentNameRequestObject

	request.EnvironmentName = environmentName

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OptionsEnvironmentName(ctx, request.(OptionsEnvironmentNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OptionsEnvironmentName")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OptionsEnvironmentNameResponseObject); ok {
		if err := validResponse.VisitOptionsEnvironmentNameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFlagsByEnvironment operation middleware
func (sh *strictHandler) GetFlagsByEnvironment(w http.ResponseWriter, r *http.Request, environmentName EnvironmentName) {
	var request GetFlagsByEnvironmentRequestObject

	request.EnvironmentName = environmentName

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFlagsByEnvironment(ctx, request.(GetFlagsByEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFlagsByEnvironment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFlagsByEnvironmentResponseObject); ok {
		if err := validResponse.VisitGetFlagsByEnvironmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// OptionsEnvironmentNameFlag operation middleware
func (sh *strictHandler) OptionsEnvironmentNameFlag(w http.ResponseWriter, r *http.Request, environmentName EnvironmentName) {
	var request OptionsEnvironmentNameFlagRequestObject

	request.EnvironmentName = environmentName

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OptionsEnvironmentNameFlag(ctx, request.(OptionsEnvironmentNameFlagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OptionsEnvironmentNameFlag")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OptionsEnvironmentNameFlagResponseObject); ok {
		if err := validResponse.VisitOptionsEnvironmentNameFlagResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// OptionsEnvironmentNameFlagId operation middleware
func (sh *strictHandler) OptionsEnvironmentNameFlagId(w http.ResponseWriter, r *http.Request, environmentName EnvironmentName, flagId FlagId) {
	var request OptionsEnvironmentNameFlagIdRequestObject

	request.EnvironmentName = environmentName
	request.FlagId = flagId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OptionsEnvironmentNameFlagId(ctx, request.(OptionsEnvironmentNameFlagIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OptionsEnvironmentNameFlagId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OptionsEnvironmentNameFlagIdResponseObject); ok {
		if err := validResponse.VisitOptionsEnvironmentNameFlagIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateEnvironmentFlagValue operation middleware
func (sh *strictHandler) UpdateEnvironmentFlagValue(w http.ResponseWriter, r *http.Request, environmentName EnvironmentName, flagId FlagId) {
	var request UpdateEnvironmentFlagValueRequestObject

	request.EnvironmentName = environmentName
	request.FlagId = flagId

	var body UpdateEnvironmentFlagValueJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateEnvironmentFlagValue(ctx, request.(UpdateEnvironmentFlagValueRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateEnvironmentFlagValue")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateEnvironmentFlagValueResponseObject); ok {
		if err := validResponse.VisitUpdateEnvironmentFlagValueResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// BulkFlags operation middleware
func (sh *strictHandler) BulkFlags(w http.ResponseWriter, r *http.Request, params BulkFlagsParams) {
	var request BulkFlagsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.BulkFlags(ctx, request.(BulkFlagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "BulkFlags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(BulkFlagsResponseObject); ok {
		if err := validResponse.VisitBulkFlagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// OptionsFlag operation middleware
func (sh *strictHandler) OptionsFlag(w http.ResponseWriter, r *http.Request) {
	var request OptionsFlagRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OptionsFlag(ctx, request.(OptionsFlagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OptionsFlag")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OptionsFlagResponseObject); ok {
		if err := validResponse.VisitOptionsFlagResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateFlag operation middleware
func (sh *strictHandler) CreateFlag(w http.ResponseWriter, r *http.Request) {
	var request CreateFlagRequestObject

	var body CreateFlagJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateFlag(ctx, request.(CreateFlagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateFlag")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateFlagResponseObject); ok {
		if err := validResponse.VisitCreateFlagResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFlag operation middleware
func (sh *strictHandler) DeleteFlag(w http.ResponseWriter, r *http.Request, flagId FlagId) {
	var request DeleteFlagRequestObject

	request.FlagId = flagId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFlag(ctx, request.(DeleteFlagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFlag")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteFlagResponseObject); ok {
		if err := validResponse.VisitDeleteFlagResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// OptionsFlagId operation middleware
func (sh *strictHandler) OptionsFlagId(w http.ResponseWriter, r *http.Request, flagId FlagId) {
	var request OptionsFlagIdRequestObject

	request.FlagId = flagId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OptionsFlagId(ctx, request.(OptionsFlagIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OptionsFlagId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OptionsFlagIdResponseObject); ok {
		if err := validResponse.VisitOptionsFlagIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateFlag operation middleware
func (sh *strictHandler) UpdateFlag(w http.ResponseWriter, r *http.Request, flagId FlagId) {
	var request UpdateFlagRequestObject

	request.FlagId = flagId

	var body UpdateFlagJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateFlag(ctx, request.(UpdateFlagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateFlag")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateFlagResponseObject); ok {
		if err := validResponse.VisitUpdateFlagResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// HealthCheck operation middleware
func (sh *strictHandler) HealthCheck(w http.ResponseWriter, r *http.Request) {
	var request HealthCheckRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.HealthCheck(ctx, request.(HealthCheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HealthCheck")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HealthCheckResponseObject); ok {
		if err := validResponse.VisitHealthCheckResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// OptionsHealthCheck operation middleware
func (sh *strictHandler) OptionsHealthCheck(w http.ResponseWriter, r *http.Request) {
	var request OptionsHealthCheckRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OptionsHealthCheck(ctx, request.(OptionsHealthCheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OptionsHealthCheck")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OptionsHealthCheckResponseObject); ok {
		if err := validResponse.VisitOptionsHealthCheckResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUiIndex operation middleware
func (sh *strictHandler) GetUiIndex(w http.ResponseWriter, r *http.Request) {
	var request GetUiIndexRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUiIndex(ctx, request.(GetUiIndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUiIndex")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUiIndexResponseObject); ok {
		if err := validResponse.VisitGetUiIndexResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// OptionsUi operation middleware
func (sh *strictHandler) OptionsUi(w http.ResponseWriter, r *http.Request) {
	var request OptionsUiRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OptionsUi(ctx, request.(OptionsUiRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OptionsUi")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OptionsUiResponseObject); ok {
		if err := validResponse.VisitOptionsUiResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUiFile operation middleware
func (sh *strictHandler) GetUiFile(w http.ResponseWriter, r *http.Request, file File) {
	var request GetUiFileRequestObject

	request.File = file

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUiFile(ctx, request.(GetUiFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUiFile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUiFileResponseObject); ok {
		if err := validResponse.VisitGetUiFileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// OptionsUiFile operation middleware
func (sh *strictHandler) OptionsUiFile(w http.ResponseWriter, r *http.Request, file File) {
	var request OptionsUiFileRequestObject

	request.File = file

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OptionsUiFile(ctx, request.(OptionsUiFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OptionsUiFile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OptionsUiFileResponseObject); ok {
		if err := validResponse.VisitOptionsUiFileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcbW/jNvL/KoT+fyBvlNi57hW4vOs+pGfgbq+4NnsvioVBS6OYXYnUklQ2buDvfpgh",
	"ZUsWlciu1/Zt/VLi08xw5jdPsp+iRBWlkiCtiW6eopJrXoAFTU8gH4RWsgBpp5IXgO9SMIkWpRVKRjfR",
	"L3NgOMJUxuwcWGPFVRRHAueU3M6jOHIbdPeMIw2fK6EhjW6sriCOTDKHguNhdlHiGmO1kPfRchlHmch7",
	"yMBjWKY00XE3YcZyKxKGC0wPLbTZ1udb0NPZYtpgpEvQLU1jGhKlU8Nmi6ZkSGJXbJIxqSwrtXoQKaQx",
	"k6o1yx0l5D0ThvGyzAWkK0Y+V6AXQalGTQZSyHiV2+gmiuJnuQlfb5eNL8LOScI12cxtx4Sk1/2skZps",
	"w5PXjh2YwasfxA1NvGIXPLHiAS5IfaSSlynkYCGtp8bswr9xU4zKbGAOz3M3PlN2fsXeOnINs2p1Qg+r",
	"juAwr25lFEcgqyK6+XX9wlMQxRHP8+jj8zJxYy+LBOeFLxBHtrpAOrLJ1P9ryKKb6P9Ga9AZuVEzynJ+",
	"74gkuvFJpGFLr6T4XAETKUgrMgG6Rh9c1WfqfsPnrD1TuuAociHt96/WOiakhXvQRFjJ74XkSMy05Pcw",
	"lVUxA92l8yd+D8wNkkqs17UV45qJtqiv2D8rY9kMGGelMgLvmnkK+gSNlIS15zqOCiFFgZpzPYghI34P",
	"6Ml7x4nKmLBQGFYCsQQd3j7wXKTsgecVGKa5xClaFez68no8Hm/wPh53uO8zEKQqzOF4HEcFf/Q8julx",
	"MMtGaTudLboM/6y0RXPIBOTpyq00Oe2YSNq0d6T7opcbf2rY4D3u1ebuH70xkWTJ9mn6tH5uO4BEA7eQ",
	"Tjk+VGW6fvCYgQ9BwNiUTSo0JE4mQRGtxneQETfJ8yJaH94DjSZp4iI9IY0h1pb1FpuRDYU9WpWgrQAa",
	"bEiviQooxUsr1rex3r0l1741sspzPsPwxQFPZw/EKCKAbGwIYOIqvw3Xmi/w2aHmi1hWS/qpS0dDYQby",
	"v2zC6kplHT/ru1Cz3yCxeEIzCCQ+OnfQS1ztxwb6ktpigsFcgOaWmQVJ11rp6Uyliy7RNNY1lHf4mhVg",
	"DCKmG5uhC0VzEcZUQY1yByUqbRLfhLEOaWFJ7qbNTXQJXcM+9L2hBW2135BqIAsJ2s504FUHUpDG8tCl",
	"b9rYWsG20cTTsUyv5e1r/tijUitGa6CdKZUDJ1B2p8Qr4utXU5OLBNYDq+ffjJI98CxkpohrYVFpog/w",
	"KHJ2C9xWGthtzu/ZDz9N0DhBG2dZ11fjqzHSqUqQvBTRTfQdvYop/CP1GfFSjDbw/h4COduPYBlnuTAW",
	"4xye552czUR0kibvNkmjm+gfwth3TTWOWyn0r2HtWE8Z9cSTy3jrlRQibbeujkN2WLV2zQMWb6SZW63w",
	"xrPFCpdMLT+i5ptSSeNg5C/jMcGhktZrAaUvCTE1Ir28eWqEGX/ACS+X8YZu/dsnWBqsFvCAaXOVJGBM",
	"VuU5QcqrLcnr8Txd89+w6S5tE/lAQTviBBjLUm65o+h6K4qek1PDawYouJO8snOlxe+Qskt2Z0Bjeomh",
	"Iw5gmpcg7jmqvjsQVbdKz0SagqxJShU4oub8ATAFKoRBIMJg1nlZ1nJpRO33B6L2vbLshySB0qLPZZfs",
	"vVql9ZmqZMoKbpN5HXY4c2GJFpjO033/dUsN3J3WibSgJc+ZAf0AmjntpRC9KgquFx5ZO+JUtIMJlQWE",
	"YSDTUglpUXcqAyndyxyST8SxX7vKU+rZVx1Q/5eb+a6VUoWwpE2DX9Zr4y323rxIF/JbKhNwVG+crnEm",
	"4UvLR62Kc6aERGQCUleP63DodthkkMz/tY9sdwSircvEw0KWj0Eca5dylp1L2iN+NQgOKHRDkh4JzgD/",
	"ZwH4vx2I2jdKZrlILLtk74I2j/ZFRsZzDTxdMHgUxlF5WtDeh180bTNcHz1tpmtLhy+Yf4aKUpllbpBx",
	"2ULH2YIJa3yH4pc2CrEvIs/ZDFjB9SdIGTesru/PKks6oaFQCOpUzkSBoxnNuAnA61ta2obX7dKCTooa",
	"CGdfBSoNDY5q+rs4dLb6wVbvNel4YV3zRpFGCuVOz6TfhizumBHbe1fo2L/VHSLwGwaDo7re11/NyHPq",
	"ibkzeB0WJr2w2BHsj2BvcYPXi6+NZl8hOe9UmQck6sRtz002bqql42dE3QJRH8RG0uK6BGdQ7YIqmrAz",
	"3/b3I8fGVbSRPwO2jp78VwMUcR5b4pN0DzIfUEf1H0oc6XriqKwC3uyOGh80l5oVVKFf+zMkmgnZ4+K6",
	"UnbbNYSMAv7gW+mHlvFuZZftHN+Qasn+oG99Zte5Mt/DantW//VYx7EeDo7PJZI/7NrdzXqXRTdKwLhx",
	"pcdw8ko7iDhhZ+8Rjq+xTIZrIy9H/fUnOFS8yD+tWpp0MbGrGBngOpnXbQAuU8ZnIhd2gRdJC+r6Aa3q",
	"QujrKv9EwfK55Xn8lmfbyM690nMp/ZT9BMHLEdK+b61FimDfBfiDZ4c+HTzVBmnmPyAiv9rTIY3p4/bV",
	"56kux4jJLTZLFe6z5r526koO+w/ohwfx14cJ4s9Nzm+5ydnA5iN0N2/bhvq/2db01tOI2dvVpEH9yzZ2",
	"+UL9JHXdS49ne29b7lTde6ZqFGhT0g2f+5P7608eIZi6PfF8+u3KhnzacfCYaIeC7UkXX7l00IvxcROY",
	"Lsw+Yih3yB7A55jR1xFLqOfo65uqn57BvLc46sKqOfDczgmin62GIsK5ufRr78rU36C647pA9HeaTHA5",
	"KKt1872zWFvkaZYLWpI4uFfcVrRfpflbiV59+RmF55TD/XmEkCk8Xs1tka82+w/M2N0k9KHMnZjg9OhF",
	"r2Dh0Y5w0/btr37ORUPBn0htQN7kmRrp6eke/dqxK9C7ycH18E4cU/1GT5nI3Vesw7SQ/sJkkALeuj80",
	"2TJ8wkUDWgAHUdtXLl88UDX4lqq+l5RP+9AFUkYEGlXpBNb+mkLf0zWsoKocxbT2r4Nf2yqXy/8GAAD/",
	"/2XJQGYHSQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
