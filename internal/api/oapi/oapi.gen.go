// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for FlagType.
const (
	Boolean      FlagType = "boolean"
	Integer      FlagType = "integer"
	IntegerSlice FlagType = "integer_slice"
	Json         FlagType = "json"
	String       FlagType = "string"
	StringSlice  FlagType = "string_slice"
)

// Defines values for FilterByState.
const (
	FilterByStateActive  FilterByState = "active"
	FilterByStateAll     FilterByState = "all"
	FilterByStateDeleted FilterByState = "deleted"
)

// Defines values for PaginationSortBy.
const (
	PaginationSortByCreatedAt    PaginationSortBy = "created_at"
	PaginationSortByDefaultValue PaginationSortBy = "default_value"
	PaginationSortByDeletedAt    PaginationSortBy = "deleted_at"
	PaginationSortByEnvironment  PaginationSortBy = "environment"
	PaginationSortByName         PaginationSortBy = "name"
	PaginationSortByType         PaginationSortBy = "type"
	PaginationSortByUpdatedAt    PaginationSortBy = "updated_at"
	PaginationSortByValue        PaginationSortBy = "value"
)

// Defines values for PaginationSortDirection.
const (
	PaginationSortDirectionAsc  PaginationSortDirection = "asc"
	PaginationSortDirectionDesc PaginationSortDirection = "desc"
)

// Defines values for ListEnvironmentsParamsSortBy.
const (
	ListEnvironmentsParamsSortByCreatedAt    ListEnvironmentsParamsSortBy = "created_at"
	ListEnvironmentsParamsSortByDefaultValue ListEnvironmentsParamsSortBy = "default_value"
	ListEnvironmentsParamsSortByDeletedAt    ListEnvironmentsParamsSortBy = "deleted_at"
	ListEnvironmentsParamsSortByEnvironment  ListEnvironmentsParamsSortBy = "environment"
	ListEnvironmentsParamsSortByName         ListEnvironmentsParamsSortBy = "name"
	ListEnvironmentsParamsSortByType         ListEnvironmentsParamsSortBy = "type"
	ListEnvironmentsParamsSortByUpdatedAt    ListEnvironmentsParamsSortBy = "updated_at"
	ListEnvironmentsParamsSortByValue        ListEnvironmentsParamsSortBy = "value"
)

// Defines values for ListEnvironmentsParamsSortDirection.
const (
	ListEnvironmentsParamsSortDirectionAsc  ListEnvironmentsParamsSortDirection = "asc"
	ListEnvironmentsParamsSortDirectionDesc ListEnvironmentsParamsSortDirection = "desc"
)

// Defines values for ListEnvironmentsParamsState.
const (
	ListEnvironmentsParamsStateActive  ListEnvironmentsParamsState = "active"
	ListEnvironmentsParamsStateAll     ListEnvironmentsParamsState = "all"
	ListEnvironmentsParamsStateDeleted ListEnvironmentsParamsState = "deleted"
)

// Defines values for BulkFlagsParamsSortBy.
const (
	BulkFlagsParamsSortByCreatedAt    BulkFlagsParamsSortBy = "created_at"
	BulkFlagsParamsSortByDefaultValue BulkFlagsParamsSortBy = "default_value"
	BulkFlagsParamsSortByDeletedAt    BulkFlagsParamsSortBy = "deleted_at"
	BulkFlagsParamsSortByEnvironment  BulkFlagsParamsSortBy = "environment"
	BulkFlagsParamsSortByName         BulkFlagsParamsSortBy = "name"
	BulkFlagsParamsSortByType         BulkFlagsParamsSortBy = "type"
	BulkFlagsParamsSortByUpdatedAt    BulkFlagsParamsSortBy = "updated_at"
	BulkFlagsParamsSortByValue        BulkFlagsParamsSortBy = "value"
)

// Defines values for BulkFlagsParamsSortDirection.
const (
	BulkFlagsParamsSortDirectionAsc  BulkFlagsParamsSortDirection = "asc"
	BulkFlagsParamsSortDirectionDesc BulkFlagsParamsSortDirection = "desc"
)

// Defines values for BulkFlagsParamsState.
const (
	BulkFlagsParamsStateActive  BulkFlagsParamsState = "active"
	BulkFlagsParamsStateAll     BulkFlagsParamsState = "all"
	BulkFlagsParamsStateDeleted BulkFlagsParamsState = "deleted"
)

// Defines values for UIFindBulkFlagsParamsSortBy.
const (
	UIFindBulkFlagsParamsSortByCreatedAt    UIFindBulkFlagsParamsSortBy = "created_at"
	UIFindBulkFlagsParamsSortByDefaultValue UIFindBulkFlagsParamsSortBy = "default_value"
	UIFindBulkFlagsParamsSortByDeletedAt    UIFindBulkFlagsParamsSortBy = "deleted_at"
	UIFindBulkFlagsParamsSortByEnvironment  UIFindBulkFlagsParamsSortBy = "environment"
	UIFindBulkFlagsParamsSortByName         UIFindBulkFlagsParamsSortBy = "name"
	UIFindBulkFlagsParamsSortByType         UIFindBulkFlagsParamsSortBy = "type"
	UIFindBulkFlagsParamsSortByUpdatedAt    UIFindBulkFlagsParamsSortBy = "updated_at"
	UIFindBulkFlagsParamsSortByValue        UIFindBulkFlagsParamsSortBy = "value"
)

// Defines values for UIFindBulkFlagsParamsSortDirection.
const (
	UIFindBulkFlagsParamsSortDirectionAsc  UIFindBulkFlagsParamsSortDirection = "asc"
	UIFindBulkFlagsParamsSortDirectionDesc UIFindBulkFlagsParamsSortDirection = "desc"
)

// Defines values for UIFindBulkFlagsParamsState.
const (
	UIFindBulkFlagsParamsStateActive  UIFindBulkFlagsParamsState = "active"
	UIFindBulkFlagsParamsStateAll     UIFindBulkFlagsParamsState = "all"
	UIFindBulkFlagsParamsStateDeleted UIFindBulkFlagsParamsState = "deleted"
)

// Environment defines model for environment.
type Environment struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	DeletedAt *time.Time `json:"deleted_at"`
	Flags     []Flag     `json:"flags"`
	Id        *int64     `json:"id,omitempty"`
	Name      string     `json:"name"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// EnvironmentFlag defines model for environment_flag.
type EnvironmentFlag struct {
	Name  string   `json:"name"`
	Type  FlagType `json:"type"`
	Value string   `json:"value"`
}

// ErrorBody defines model for error_body.
type ErrorBody struct {
	// Error Error message describing the issue
	Error     string `json:"error"`
	ErrorCode int    `json:"error_code"`
}

// Flag defines model for flag.
type Flag struct {
	CreatedAt    *time.Time `json:"created_at,omitempty"`
	DefaultValue string     `json:"default_value"`
	DeletedAt    *time.Time `json:"deleted_at"`
	Environments *[]struct {
		EnvironmentName string `json:"environment_name"`
		FlagValue       string `json:"flag_value"`
	} `json:"environments,omitempty"`
	Id        *int64     `json:"id,omitempty"`
	Name      string     `json:"name"`
	Type      FlagType   `json:"type"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// FlagType defines model for flag_type.
type FlagType string

// EnvironmentName defines model for environment_name.
type EnvironmentName = string

// FilterByEnvironment defines model for filter_by_environment.
type FilterByEnvironment = string

// FilterByName defines model for filter_by_name.
type FilterByName = string

// FilterByState defines model for filter_by_state.
type FilterByState string

// FilterByType defines model for filter_by_type.
type FilterByType = FlagType

// FlagId defines model for flag_id.
type FlagId = int64

// PaginationPageNumber defines model for pagination_page_number.
type PaginationPageNumber = int

// PaginationPageSize defines model for pagination_page_size.
type PaginationPageSize = int

// PaginationSortBy defines model for pagination_sort_by.
type PaginationSortBy string

// PaginationSortDirection defines model for pagination_sort_direction.
type PaginationSortDirection string

// ListEnvironmentsParams defines parameters for ListEnvironments.
type ListEnvironmentsParams struct {
	// Page Page number for pagination. Defaults to 1 if not provided. Must be a positive integer.
	Page *PaginationPageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page for pagination. Valid values range from 1-1000. Defaults to 100 if not provided.
	Size *PaginationPageSize `form:"size,omitempty" json:"size,omitempty"`

	// SortBy Sort by field for the pagination. If not provided, defaults to 'name'.
	SortBy *ListEnvironmentsParamsSortBy `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// SortDirection Sort direction for the pagination. If not provided, defaults to 'asc'.
	SortDirection *ListEnvironmentsParamsSortDirection `form:"sort_direction,omitempty" json:"sort_direction,omitempty"`

	// Name Filter records by with the provided string in the name. If not provided, no name filtering is applied.
	Name *FilterByName `form:"name,omitempty" json:"name,omitempty"`

	// Type Filter records by type. If not provided, no type filtering is applied.
	Type *FilterByType `form:"type,omitempty" json:"type,omitempty"`

	// State Filter records by state. 'active' for non-deleted records, 'deleted' for soft-deleted records, 'all' for both. Defaults to 'active'
	State *ListEnvironmentsParamsState `form:"state,omitempty" json:"state,omitempty"`
}

// ListEnvironmentsParamsSortBy defines parameters for ListEnvironments.
type ListEnvironmentsParamsSortBy string

// ListEnvironmentsParamsSortDirection defines parameters for ListEnvironments.
type ListEnvironmentsParamsSortDirection string

// ListEnvironmentsParamsState defines parameters for ListEnvironments.
type ListEnvironmentsParamsState string

// CreateEnvironmentJSONBody defines parameters for CreateEnvironment.
type CreateEnvironmentJSONBody struct {
	// Name The name of the environment
	Name string `json:"name"`
}

// BulkFlagsParams defines parameters for BulkFlags.
type BulkFlagsParams struct {
	// Page Page number for pagination. Defaults to 1 if not provided. Must be a positive integer.
	Page *PaginationPageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page for pagination. Valid values range from 1-1000. Defaults to 100 if not provided.
	Size *PaginationPageSize `form:"size,omitempty" json:"size,omitempty"`

	// SortBy Sort by field for the pagination. If not provided, defaults to 'name'.
	SortBy *BulkFlagsParamsSortBy `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// SortDirection Sort direction for the pagination. If not provided, defaults to 'asc'.
	SortDirection *BulkFlagsParamsSortDirection `form:"sort_direction,omitempty" json:"sort_direction,omitempty"`

	// Name Filter records by with the provided string in the name. If not provided, no name filtering is applied.
	Name *FilterByName `form:"name,omitempty" json:"name,omitempty"`

	// Type Filter records by type. If not provided, no type filtering is applied.
	Type *FilterByType `form:"type,omitempty" json:"type,omitempty"`

	// Environment Filter records by environment name. If not provided, no environment filtering is applied.
	Environment *FilterByEnvironment `form:"environment,omitempty" json:"environment,omitempty"`

	// State Filter records by state. 'active' for non-deleted records, 'deleted' for soft-deleted records, 'all' for both. Defaults to 'active'
	State *BulkFlagsParamsState `form:"state,omitempty" json:"state,omitempty"`
}

// BulkFlagsParamsSortBy defines parameters for BulkFlags.
type BulkFlagsParamsSortBy string

// BulkFlagsParamsSortDirection defines parameters for BulkFlags.
type BulkFlagsParamsSortDirection string

// BulkFlagsParamsState defines parameters for BulkFlags.
type BulkFlagsParamsState string

// UIFindBulkFlagsParams defines parameters for UIFindBulkFlags.
type UIFindBulkFlagsParams struct {
	// Page Page number for pagination. Defaults to 1 if not provided. Must be a positive integer.
	Page *PaginationPageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page for pagination. Valid values range from 1-1000. Defaults to 100 if not provided.
	Size *PaginationPageSize `form:"size,omitempty" json:"size,omitempty"`

	// SortBy Sort by field for the pagination. If not provided, defaults to 'name'.
	SortBy *UIFindBulkFlagsParamsSortBy `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// SortDirection Sort direction for the pagination. If not provided, defaults to 'asc'.
	SortDirection *UIFindBulkFlagsParamsSortDirection `form:"sort_direction,omitempty" json:"sort_direction,omitempty"`

	// Name Filter records by with the provided string in the name. If not provided, no name filtering is applied.
	Name *FilterByName `form:"name,omitempty" json:"name,omitempty"`

	// Type Filter records by type. If not provided, no type filtering is applied.
	Type *FilterByType `form:"type,omitempty" json:"type,omitempty"`

	// Environment Filter records by environment name. If not provided, no environment filtering is applied.
	Environment *FilterByEnvironment `form:"environment,omitempty" json:"environment,omitempty"`

	// State Filter records by state. 'active' for non-deleted records, 'deleted' for soft-deleted records, 'all' for both. Defaults to 'active'
	State *UIFindBulkFlagsParamsState `form:"state,omitempty" json:"state,omitempty"`
}

// UIFindBulkFlagsParamsSortBy defines parameters for UIFindBulkFlags.
type UIFindBulkFlagsParamsSortBy string

// UIFindBulkFlagsParamsSortDirection defines parameters for UIFindBulkFlags.
type UIFindBulkFlagsParamsSortDirection string

// UIFindBulkFlagsParamsState defines parameters for UIFindBulkFlags.
type UIFindBulkFlagsParamsState string

// CreateEnvironmentJSONRequestBody defines body for CreateEnvironment for application/json ContentType.
type CreateEnvironmentJSONRequestBody CreateEnvironmentJSONBody

// UpdateEnvironmentFlagValueJSONRequestBody defines body for UpdateEnvironmentFlagValue for application/json ContentType.
type UpdateEnvironmentFlagValueJSONRequestBody = EnvironmentFlag

// CreateFlagJSONRequestBody defines body for CreateFlag for application/json ContentType.
type CreateFlagJSONRequestBody = Flag

// UpdateFlagJSONRequestBody defines body for UpdateFlag for application/json ContentType.
type UpdateFlagJSONRequestBody = Flag

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List environments
	// (GET /api/environment)
	ListEnvironments(w http.ResponseWriter, r *http.Request, params ListEnvironmentsParams)
	// Check the options for the endpoint
	// (OPTIONS /api/environment)
	OptionsEnvironment(w http.ResponseWriter, r *http.Request)
	// Create a new environment
	// (POST /api/environment)
	CreateEnvironment(w http.ResponseWriter, r *http.Request)
	// Delete an environment
	// (DELETE /api/environment/{environment_name})
	DeleteEnvironment(w http.ResponseWriter, r *http.Request, environmentName EnvironmentName)
	// Check the options for the endpoint
	// (OPTIONS /api/environment/{environment_name})
	OptionsEnvironmentName(w http.ResponseWriter, r *http.Request, environmentName EnvironmentName)
	// Get flags by environment
	// (GET /api/environment/{environment_name}/flag)
	GetFlagsByEnvironment(w http.ResponseWriter, r *http.Request, environmentName EnvironmentName)
	// Check the options for the endpoint
	// (OPTIONS /api/environment/{environment_name}/flag)
	OptionsEnvironmentNameFlag(w http.ResponseWriter, r *http.Request, environmentName EnvironmentName)
	// Check the options for the endpoint
	// (OPTIONS /api/environment/{environment_name}/flag/{flag_id})
	OptionsEnvironmentNameFlagId(w http.ResponseWriter, r *http.Request, environmentName EnvironmentName, flagId FlagId)
	// Update a flag in an environment
	// (PUT /api/environment/{environment_name}/flag/{flag_id})
	UpdateEnvironmentFlagValue(w http.ResponseWriter, r *http.Request, environmentName EnvironmentName, flagId FlagId)
	// Get bulk list of flags
	// (GET /api/flag)
	BulkFlags(w http.ResponseWriter, r *http.Request, params BulkFlagsParams)
	// Check the options for the endpoint
	// (OPTIONS /api/flag)
	OptionsFlag(w http.ResponseWriter, r *http.Request)
	// Create a new flag
	// (POST /api/flag)
	CreateFlag(w http.ResponseWriter, r *http.Request)
	// Delete a flag
	// (DELETE /api/flag/{flag_id})
	DeleteFlag(w http.ResponseWriter, r *http.Request, flagId FlagId)
	// Check the options for the endpoint
	// (OPTIONS /api/flag/{flag_id})
	OptionsFlagId(w http.ResponseWriter, r *http.Request, flagId FlagId)
	// Update a flag
	// (PUT /api/flag/{flag_id})
	UpdateFlag(w http.ResponseWriter, r *http.Request, flagId FlagId)
	// Get health status
	// (GET /healthcheck)
	HealthCheck(w http.ResponseWriter, r *http.Request)
	// Check the options for the endpoint
	// (OPTIONS /healthcheck)
	OptionsHealthCheck(w http.ResponseWriter, r *http.Request)
	// Check the options for the endpoint
	// (OPTIONS /ui/flag)
	UIOptionsCreateSingleFlag(w http.ResponseWriter, r *http.Request)
	// create a single flag
	// (POST /ui/flag)
	UICreateSingleFlag(w http.ResponseWriter, r *http.Request)
	// delete a single flag
	// (DELETE /ui/flag/{flag_id})
	UIKillSingleFlag(w http.ResponseWriter, r *http.Request, flagId FlagId)
	// Check the options for the endpoint
	// (OPTIONS /ui/flag/{flag_id})
	UIOptionsSingleFlag(w http.ResponseWriter, r *http.Request, flagId FlagId)
	// update a single flag
	// (POST /ui/flag/{flag_id})
	UIUpdateSingleFlag(w http.ResponseWriter, r *http.Request, flagId FlagId)
	// Get bulk list of flags
	// (GET /ui/flags)
	UIFindBulkFlags(w http.ResponseWriter, r *http.Request, params UIFindBulkFlagsParams)
	// Check the options for the endpoint
	// (OPTIONS /ui/flags)
	UIOptionsFindBulkFlags(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListEnvironments operation middleware
func (siw *ServerInterfaceWrapper) ListEnvironments(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEnvironmentsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", r.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort_by", Err: err})
		return
	}

	// ------------- Optional query parameter "sort_direction" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_direction", r.URL.Query(), &params.SortDirection)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort_direction", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEnvironments(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsEnvironment operation middleware
func (siw *ServerInterfaceWrapper) OptionsEnvironment(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsEnvironment(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateEnvironment operation middleware
func (siw *ServerInterfaceWrapper) CreateEnvironment(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEnvironment(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteEnvironment operation middleware
func (siw *ServerInterfaceWrapper) DeleteEnvironment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "environment_name" -------------
	var environmentName EnvironmentName

	err = runtime.BindStyledParameterWithOptions("simple", "environment_name", mux.Vars(r)["environment_name"], &environmentName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment_name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteEnvironment(w, r, environmentName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsEnvironmentName operation middleware
func (siw *ServerInterfaceWrapper) OptionsEnvironmentName(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "environment_name" -------------
	var environmentName EnvironmentName

	err = runtime.BindStyledParameterWithOptions("simple", "environment_name", mux.Vars(r)["environment_name"], &environmentName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment_name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsEnvironmentName(w, r, environmentName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetFlagsByEnvironment operation middleware
func (siw *ServerInterfaceWrapper) GetFlagsByEnvironment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "environment_name" -------------
	var environmentName EnvironmentName

	err = runtime.BindStyledParameterWithOptions("simple", "environment_name", mux.Vars(r)["environment_name"], &environmentName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment_name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFlagsByEnvironment(w, r, environmentName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsEnvironmentNameFlag operation middleware
func (siw *ServerInterfaceWrapper) OptionsEnvironmentNameFlag(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "environment_name" -------------
	var environmentName EnvironmentName

	err = runtime.BindStyledParameterWithOptions("simple", "environment_name", mux.Vars(r)["environment_name"], &environmentName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment_name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsEnvironmentNameFlag(w, r, environmentName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsEnvironmentNameFlagId operation middleware
func (siw *ServerInterfaceWrapper) OptionsEnvironmentNameFlagId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "environment_name" -------------
	var environmentName EnvironmentName

	err = runtime.BindStyledParameterWithOptions("simple", "environment_name", mux.Vars(r)["environment_name"], &environmentName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment_name", Err: err})
		return
	}

	// ------------- Path parameter "flag_id" -------------
	var flagId FlagId

	err = runtime.BindStyledParameterWithOptions("simple", "flag_id", mux.Vars(r)["flag_id"], &flagId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flag_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsEnvironmentNameFlagId(w, r, environmentName, flagId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateEnvironmentFlagValue operation middleware
func (siw *ServerInterfaceWrapper) UpdateEnvironmentFlagValue(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "environment_name" -------------
	var environmentName EnvironmentName

	err = runtime.BindStyledParameterWithOptions("simple", "environment_name", mux.Vars(r)["environment_name"], &environmentName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment_name", Err: err})
		return
	}

	// ------------- Path parameter "flag_id" -------------
	var flagId FlagId

	err = runtime.BindStyledParameterWithOptions("simple", "flag_id", mux.Vars(r)["flag_id"], &flagId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flag_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateEnvironmentFlagValue(w, r, environmentName, flagId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// BulkFlags operation middleware
func (siw *ServerInterfaceWrapper) BulkFlags(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params BulkFlagsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", r.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort_by", Err: err})
		return
	}

	// ------------- Optional query parameter "sort_direction" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_direction", r.URL.Query(), &params.SortDirection)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort_direction", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "environment" -------------

	err = runtime.BindQueryParameter("form", true, false, "environment", r.URL.Query(), &params.Environment)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment", Err: err})
		return
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BulkFlags(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsFlag operation middleware
func (siw *ServerInterfaceWrapper) OptionsFlag(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsFlag(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateFlag operation middleware
func (siw *ServerInterfaceWrapper) CreateFlag(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFlag(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteFlag operation middleware
func (siw *ServerInterfaceWrapper) DeleteFlag(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "flag_id" -------------
	var flagId FlagId

	err = runtime.BindStyledParameterWithOptions("simple", "flag_id", mux.Vars(r)["flag_id"], &flagId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flag_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFlag(w, r, flagId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsFlagId operation middleware
func (siw *ServerInterfaceWrapper) OptionsFlagId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "flag_id" -------------
	var flagId FlagId

	err = runtime.BindStyledParameterWithOptions("simple", "flag_id", mux.Vars(r)["flag_id"], &flagId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flag_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsFlagId(w, r, flagId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateFlag operation middleware
func (siw *ServerInterfaceWrapper) UpdateFlag(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "flag_id" -------------
	var flagId FlagId

	err = runtime.BindStyledParameterWithOptions("simple", "flag_id", mux.Vars(r)["flag_id"], &flagId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flag_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateFlag(w, r, flagId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HealthCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsHealthCheck operation middleware
func (siw *ServerInterfaceWrapper) OptionsHealthCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsHealthCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UIOptionsCreateSingleFlag operation middleware
func (siw *ServerInterfaceWrapper) UIOptionsCreateSingleFlag(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UIOptionsCreateSingleFlag(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UICreateSingleFlag operation middleware
func (siw *ServerInterfaceWrapper) UICreateSingleFlag(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UICreateSingleFlag(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UIKillSingleFlag operation middleware
func (siw *ServerInterfaceWrapper) UIKillSingleFlag(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "flag_id" -------------
	var flagId FlagId

	err = runtime.BindStyledParameterWithOptions("simple", "flag_id", mux.Vars(r)["flag_id"], &flagId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flag_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UIKillSingleFlag(w, r, flagId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UIOptionsSingleFlag operation middleware
func (siw *ServerInterfaceWrapper) UIOptionsSingleFlag(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "flag_id" -------------
	var flagId FlagId

	err = runtime.BindStyledParameterWithOptions("simple", "flag_id", mux.Vars(r)["flag_id"], &flagId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flag_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UIOptionsSingleFlag(w, r, flagId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UIUpdateSingleFlag operation middleware
func (siw *ServerInterfaceWrapper) UIUpdateSingleFlag(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "flag_id" -------------
	var flagId FlagId

	err = runtime.BindStyledParameterWithOptions("simple", "flag_id", mux.Vars(r)["flag_id"], &flagId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flag_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UIUpdateSingleFlag(w, r, flagId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UIFindBulkFlags operation middleware
func (siw *ServerInterfaceWrapper) UIFindBulkFlags(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UIFindBulkFlagsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", r.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort_by", Err: err})
		return
	}

	// ------------- Optional query parameter "sort_direction" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_direction", r.URL.Query(), &params.SortDirection)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort_direction", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "environment" -------------

	err = runtime.BindQueryParameter("form", true, false, "environment", r.URL.Query(), &params.Environment)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment", Err: err})
		return
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UIFindBulkFlags(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UIOptionsFindBulkFlags operation middleware
func (siw *ServerInterfaceWrapper) UIOptionsFindBulkFlags(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UIOptionsFindBulkFlags(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/api/environment", wrapper.ListEnvironments).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/environment", wrapper.OptionsEnvironment).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/api/environment", wrapper.CreateEnvironment).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/environment/{environment_name}", wrapper.DeleteEnvironment).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/environment/{environment_name}", wrapper.OptionsEnvironmentName).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/api/environment/{environment_name}/flag", wrapper.GetFlagsByEnvironment).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/environment/{environment_name}/flag", wrapper.OptionsEnvironmentNameFlag).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/api/environment/{environment_name}/flag/{flag_id}", wrapper.OptionsEnvironmentNameFlagId).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/api/environment/{environment_name}/flag/{flag_id}", wrapper.UpdateEnvironmentFlagValue).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/api/flag", wrapper.BulkFlags).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/flag", wrapper.OptionsFlag).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/api/flag", wrapper.CreateFlag).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/flag/{flag_id}", wrapper.DeleteFlag).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/flag/{flag_id}", wrapper.OptionsFlagId).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/api/flag/{flag_id}", wrapper.UpdateFlag).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/healthcheck", wrapper.HealthCheck).Methods("GET")

	r.HandleFunc(options.BaseURL+"/healthcheck", wrapper.OptionsHealthCheck).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/ui/flag", wrapper.UIOptionsCreateSingleFlag).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/ui/flag", wrapper.UICreateSingleFlag).Methods("POST")

	r.HandleFunc(options.BaseURL+"/ui/flag/{flag_id}", wrapper.UIKillSingleFlag).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/ui/flag/{flag_id}", wrapper.UIOptionsSingleFlag).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/ui/flag/{flag_id}", wrapper.UIUpdateSingleFlag).Methods("POST")

	r.HandleFunc(options.BaseURL+"/ui/flags", wrapper.UIFindBulkFlags).Methods("GET")

	r.HandleFunc(options.BaseURL+"/ui/flags", wrapper.UIOptionsFindBulkFlags).Methods("OPTIONS")

	return r
}

type ListEnvironmentsRequestObject struct {
	Params ListEnvironmentsParams
}

type ListEnvironmentsResponseObject interface {
	VisitListEnvironmentsResponse(w http.ResponseWriter) error
}

type ListEnvironments200JSONResponse []Flag

func (response ListEnvironments200JSONResponse) VisitListEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListEnvironments400JSONResponse ErrorBody

func (response ListEnvironments400JSONResponse) VisitListEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListEnvironments401JSONResponse ErrorBody

func (response ListEnvironments401JSONResponse) VisitListEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListEnvironments403JSONResponse ErrorBody

func (response ListEnvironments403JSONResponse) VisitListEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListEnvironments406JSONResponse ErrorBody

func (response ListEnvironments406JSONResponse) VisitListEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type ListEnvironments500JSONResponse ErrorBody

func (response ListEnvironments500JSONResponse) VisitListEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type OptionsEnvironmentRequestObject struct {
}

type OptionsEnvironmentResponseObject interface {
	VisitOptionsEnvironmentResponse(w http.ResponseWriter) error
}

type OptionsEnvironment200Response struct {
}

func (response OptionsEnvironment200Response) VisitOptionsEnvironmentResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type CreateEnvironmentRequestObject struct {
	Body *CreateEnvironmentJSONRequestBody
}

type CreateEnvironmentResponseObject interface {
	VisitCreateEnvironmentResponse(w http.ResponseWriter) error
}

type CreateEnvironment201JSONResponse Environment

func (response CreateEnvironment201JSONResponse) VisitCreateEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateEnvironment400JSONResponse struct {
	Error *string `json:"error,omitempty"`
}

func (response CreateEnvironment400JSONResponse) VisitCreateEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateEnvironment401JSONResponse ErrorBody

func (response CreateEnvironment401JSONResponse) VisitCreateEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateEnvironment403JSONResponse ErrorBody

func (response CreateEnvironment403JSONResponse) VisitCreateEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateEnvironment409JSONResponse ErrorBody

func (response CreateEnvironment409JSONResponse) VisitCreateEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateEnvironment500JSONResponse ErrorBody

func (response CreateEnvironment500JSONResponse) VisitCreateEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEnvironmentRequestObject struct {
	EnvironmentName EnvironmentName `json:"environment_name"`
}

type DeleteEnvironmentResponseObject interface {
	VisitDeleteEnvironmentResponse(w http.ResponseWriter) error
}

type DeleteEnvironment204Response struct {
}

func (response DeleteEnvironment204Response) VisitDeleteEnvironmentResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteEnvironment401JSONResponse ErrorBody

func (response DeleteEnvironment401JSONResponse) VisitDeleteEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEnvironment403JSONResponse ErrorBody

func (response DeleteEnvironment403JSONResponse) VisitDeleteEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEnvironment406JSONResponse ErrorBody

func (response DeleteEnvironment406JSONResponse) VisitDeleteEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEnvironment500JSONResponse ErrorBody

func (response DeleteEnvironment500JSONResponse) VisitDeleteEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type OptionsEnvironmentNameRequestObject struct {
	EnvironmentName EnvironmentName `json:"environment_name"`
}

type OptionsEnvironmentNameResponseObject interface {
	VisitOptionsEnvironmentNameResponse(w http.ResponseWriter) error
}

type OptionsEnvironmentName200Response struct {
}

func (response OptionsEnvironmentName200Response) VisitOptionsEnvironmentNameResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetFlagsByEnvironmentRequestObject struct {
	EnvironmentName EnvironmentName `json:"environment_name"`
}

type GetFlagsByEnvironmentResponseObject interface {
	VisitGetFlagsByEnvironmentResponse(w http.ResponseWriter) error
}

type GetFlagsByEnvironment200JSONResponse []EnvironmentFlag

func (response GetFlagsByEnvironment200JSONResponse) VisitGetFlagsByEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFlagsByEnvironment400JSONResponse ErrorBody

func (response GetFlagsByEnvironment400JSONResponse) VisitGetFlagsByEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetFlagsByEnvironment401JSONResponse ErrorBody

func (response GetFlagsByEnvironment401JSONResponse) VisitGetFlagsByEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetFlagsByEnvironment403JSONResponse ErrorBody

func (response GetFlagsByEnvironment403JSONResponse) VisitGetFlagsByEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetFlagsByEnvironment406JSONResponse ErrorBody

func (response GetFlagsByEnvironment406JSONResponse) VisitGetFlagsByEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type GetFlagsByEnvironment500JSONResponse ErrorBody

func (response GetFlagsByEnvironment500JSONResponse) VisitGetFlagsByEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type OptionsEnvironmentNameFlagRequestObject struct {
	EnvironmentName EnvironmentName `json:"environment_name"`
}

type OptionsEnvironmentNameFlagResponseObject interface {
	VisitOptionsEnvironmentNameFlagResponse(w http.ResponseWriter) error
}

type OptionsEnvironmentNameFlag200Response struct {
}

func (response OptionsEnvironmentNameFlag200Response) VisitOptionsEnvironmentNameFlagResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type OptionsEnvironmentNameFlagIdRequestObject struct {
	EnvironmentName EnvironmentName `json:"environment_name"`
	FlagId          FlagId          `json:"flag_id"`
}

type OptionsEnvironmentNameFlagIdResponseObject interface {
	VisitOptionsEnvironmentNameFlagIdResponse(w http.ResponseWriter) error
}

type OptionsEnvironmentNameFlagId200Response struct {
}

func (response OptionsEnvironmentNameFlagId200Response) VisitOptionsEnvironmentNameFlagIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateEnvironmentFlagValueRequestObject struct {
	EnvironmentName EnvironmentName `json:"environment_name"`
	FlagId          FlagId          `json:"flag_id"`
	Body            *UpdateEnvironmentFlagValueJSONRequestBody
}

type UpdateEnvironmentFlagValueResponseObject interface {
	VisitUpdateEnvironmentFlagValueResponse(w http.ResponseWriter) error
}

type UpdateEnvironmentFlagValue200JSONResponse Flag

func (response UpdateEnvironmentFlagValue200JSONResponse) VisitUpdateEnvironmentFlagValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateEnvironmentFlagValue400JSONResponse ErrorBody

func (response UpdateEnvironmentFlagValue400JSONResponse) VisitUpdateEnvironmentFlagValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateEnvironmentFlagValue401JSONResponse ErrorBody

func (response UpdateEnvironmentFlagValue401JSONResponse) VisitUpdateEnvironmentFlagValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateEnvironmentFlagValue403JSONResponse ErrorBody

func (response UpdateEnvironmentFlagValue403JSONResponse) VisitUpdateEnvironmentFlagValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateEnvironmentFlagValue406JSONResponse ErrorBody

func (response UpdateEnvironmentFlagValue406JSONResponse) VisitUpdateEnvironmentFlagValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type UpdateEnvironmentFlagValue500JSONResponse ErrorBody

func (response UpdateEnvironmentFlagValue500JSONResponse) VisitUpdateEnvironmentFlagValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type BulkFlagsRequestObject struct {
	Params BulkFlagsParams
}

type BulkFlagsResponseObject interface {
	VisitBulkFlagsResponse(w http.ResponseWriter) error
}

type BulkFlags200JSONResponse []Flag

func (response BulkFlags200JSONResponse) VisitBulkFlagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type BulkFlags400JSONResponse struct {
	Error *string `json:"error,omitempty"`
}

func (response BulkFlags400JSONResponse) VisitBulkFlagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type BulkFlags401JSONResponse ErrorBody

func (response BulkFlags401JSONResponse) VisitBulkFlagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type BulkFlags403JSONResponse ErrorBody

func (response BulkFlags403JSONResponse) VisitBulkFlagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type BulkFlags406JSONResponse ErrorBody

func (response BulkFlags406JSONResponse) VisitBulkFlagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type BulkFlags500JSONResponse ErrorBody

func (response BulkFlags500JSONResponse) VisitBulkFlagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type OptionsFlagRequestObject struct {
}

type OptionsFlagResponseObject interface {
	VisitOptionsFlagResponse(w http.ResponseWriter) error
}

type OptionsFlag200Response struct {
}

func (response OptionsFlag200Response) VisitOptionsFlagResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type CreateFlagRequestObject struct {
	Body *CreateFlagJSONRequestBody
}

type CreateFlagResponseObject interface {
	VisitCreateFlagResponse(w http.ResponseWriter) error
}

type CreateFlag201JSONResponse Flag

func (response CreateFlag201JSONResponse) VisitCreateFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateFlag400JSONResponse struct {
	Error *string `json:"error,omitempty"`
}

func (response CreateFlag400JSONResponse) VisitCreateFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateFlag401JSONResponse ErrorBody

func (response CreateFlag401JSONResponse) VisitCreateFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateFlag403JSONResponse ErrorBody

func (response CreateFlag403JSONResponse) VisitCreateFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateFlag409JSONResponse ErrorBody

func (response CreateFlag409JSONResponse) VisitCreateFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateFlag500JSONResponse ErrorBody

func (response CreateFlag500JSONResponse) VisitCreateFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFlagRequestObject struct {
	FlagId FlagId `json:"flag_id"`
}

type DeleteFlagResponseObject interface {
	VisitDeleteFlagResponse(w http.ResponseWriter) error
}

type DeleteFlag204Response struct {
}

func (response DeleteFlag204Response) VisitDeleteFlagResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteFlag401JSONResponse ErrorBody

func (response DeleteFlag401JSONResponse) VisitDeleteFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFlag403JSONResponse ErrorBody

func (response DeleteFlag403JSONResponse) VisitDeleteFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFlag406JSONResponse ErrorBody

func (response DeleteFlag406JSONResponse) VisitDeleteFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFlag500JSONResponse ErrorBody

func (response DeleteFlag500JSONResponse) VisitDeleteFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type OptionsFlagIdRequestObject struct {
	FlagId FlagId `json:"flag_id"`
}

type OptionsFlagIdResponseObject interface {
	VisitOptionsFlagIdResponse(w http.ResponseWriter) error
}

type OptionsFlagId200Response struct {
}

func (response OptionsFlagId200Response) VisitOptionsFlagIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateFlagRequestObject struct {
	FlagId FlagId `json:"flag_id"`
	Body   *UpdateFlagJSONRequestBody
}

type UpdateFlagResponseObject interface {
	VisitUpdateFlagResponse(w http.ResponseWriter) error
}

type UpdateFlag200JSONResponse Flag

func (response UpdateFlag200JSONResponse) VisitUpdateFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFlag400JSONResponse struct {
	Error *string `json:"error,omitempty"`
}

func (response UpdateFlag400JSONResponse) VisitUpdateFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFlag401JSONResponse ErrorBody

func (response UpdateFlag401JSONResponse) VisitUpdateFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFlag403JSONResponse ErrorBody

func (response UpdateFlag403JSONResponse) VisitUpdateFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFlag406JSONResponse ErrorBody

func (response UpdateFlag406JSONResponse) VisitUpdateFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFlag500JSONResponse ErrorBody

func (response UpdateFlag500JSONResponse) VisitUpdateFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type HealthCheckRequestObject struct {
}

type HealthCheckResponseObject interface {
	VisitHealthCheckResponse(w http.ResponseWriter) error
}

type HealthCheck200Response struct {
}

func (response HealthCheck200Response) VisitHealthCheckResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type HealthCheck500JSONResponse ErrorBody

func (response HealthCheck500JSONResponse) VisitHealthCheckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type OptionsHealthCheckRequestObject struct {
}

type OptionsHealthCheckResponseObject interface {
	VisitOptionsHealthCheckResponse(w http.ResponseWriter) error
}

type OptionsHealthCheck200Response struct {
}

func (response OptionsHealthCheck200Response) VisitOptionsHealthCheckResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UIOptionsCreateSingleFlagRequestObject struct {
}

type UIOptionsCreateSingleFlagResponseObject interface {
	VisitUIOptionsCreateSingleFlagResponse(w http.ResponseWriter) error
}

type UIOptionsCreateSingleFlag200Response struct {
}

func (response UIOptionsCreateSingleFlag200Response) VisitUIOptionsCreateSingleFlagResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UICreateSingleFlagRequestObject struct {
}

type UICreateSingleFlagResponseObject interface {
	VisitUICreateSingleFlagResponse(w http.ResponseWriter) error
}

type UICreateSingleFlag200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response UICreateSingleFlag200TexthtmlResponse) VisitUICreateSingleFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type UICreateSingleFlag400JSONResponse struct {
	Error *string `json:"error,omitempty"`
}

func (response UICreateSingleFlag400JSONResponse) VisitUICreateSingleFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UICreateSingleFlag401TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response UICreateSingleFlag401TexthtmlResponse) VisitUICreateSingleFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(401)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type UICreateSingleFlag403TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response UICreateSingleFlag403TexthtmlResponse) VisitUICreateSingleFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type UICreateSingleFlag500TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response UICreateSingleFlag500TexthtmlResponse) VisitUICreateSingleFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(500)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type UIKillSingleFlagRequestObject struct {
	FlagId FlagId `json:"flag_id"`
}

type UIKillSingleFlagResponseObject interface {
	VisitUIKillSingleFlagResponse(w http.ResponseWriter) error
}

type UIKillSingleFlag200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response UIKillSingleFlag200TexthtmlResponse) VisitUIKillSingleFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type UIKillSingleFlag400JSONResponse struct {
	Error *string `json:"error,omitempty"`
}

func (response UIKillSingleFlag400JSONResponse) VisitUIKillSingleFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UIKillSingleFlag401TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response UIKillSingleFlag401TexthtmlResponse) VisitUIKillSingleFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(401)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type UIKillSingleFlag403TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response UIKillSingleFlag403TexthtmlResponse) VisitUIKillSingleFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type UIKillSingleFlag406TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response UIKillSingleFlag406TexthtmlResponse) VisitUIKillSingleFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(406)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type UIKillSingleFlag500TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response UIKillSingleFlag500TexthtmlResponse) VisitUIKillSingleFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(500)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type UIOptionsSingleFlagRequestObject struct {
	FlagId FlagId `json:"flag_id"`
}

type UIOptionsSingleFlagResponseObject interface {
	VisitUIOptionsSingleFlagResponse(w http.ResponseWriter) error
}

type UIOptionsSingleFlag200Response struct {
}

func (response UIOptionsSingleFlag200Response) VisitUIOptionsSingleFlagResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UIUpdateSingleFlagRequestObject struct {
	FlagId FlagId `json:"flag_id"`
}

type UIUpdateSingleFlagResponseObject interface {
	VisitUIUpdateSingleFlagResponse(w http.ResponseWriter) error
}

type UIUpdateSingleFlag200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response UIUpdateSingleFlag200TexthtmlResponse) VisitUIUpdateSingleFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type UIUpdateSingleFlag400JSONResponse struct {
	Error *string `json:"error,omitempty"`
}

func (response UIUpdateSingleFlag400JSONResponse) VisitUIUpdateSingleFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UIUpdateSingleFlag401TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response UIUpdateSingleFlag401TexthtmlResponse) VisitUIUpdateSingleFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(401)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type UIUpdateSingleFlag403TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response UIUpdateSingleFlag403TexthtmlResponse) VisitUIUpdateSingleFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type UIUpdateSingleFlag406TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response UIUpdateSingleFlag406TexthtmlResponse) VisitUIUpdateSingleFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(406)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type UIUpdateSingleFlag500TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response UIUpdateSingleFlag500TexthtmlResponse) VisitUIUpdateSingleFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(500)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type UIFindBulkFlagsRequestObject struct {
	Params UIFindBulkFlagsParams
}

type UIFindBulkFlagsResponseObject interface {
	VisitUIFindBulkFlagsResponse(w http.ResponseWriter) error
}

type UIFindBulkFlags200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response UIFindBulkFlags200TexthtmlResponse) VisitUIFindBulkFlagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type UIFindBulkFlags400JSONResponse struct {
	Error *string `json:"error,omitempty"`
}

func (response UIFindBulkFlags400JSONResponse) VisitUIFindBulkFlagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UIFindBulkFlags401TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response UIFindBulkFlags401TexthtmlResponse) VisitUIFindBulkFlagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(401)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type UIFindBulkFlags403TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response UIFindBulkFlags403TexthtmlResponse) VisitUIFindBulkFlagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type UIFindBulkFlags406TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response UIFindBulkFlags406TexthtmlResponse) VisitUIFindBulkFlagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(406)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type UIFindBulkFlags500TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response UIFindBulkFlags500TexthtmlResponse) VisitUIFindBulkFlagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(500)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type UIOptionsFindBulkFlagsRequestObject struct {
}

type UIOptionsFindBulkFlagsResponseObject interface {
	VisitUIOptionsFindBulkFlagsResponse(w http.ResponseWriter) error
}

type UIOptionsFindBulkFlags200Response struct {
}

func (response UIOptionsFindBulkFlags200Response) VisitUIOptionsFindBulkFlagsResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List environments
	// (GET /api/environment)
	ListEnvironments(ctx context.Context, request ListEnvironmentsRequestObject) (ListEnvironmentsResponseObject, error)
	// Check the options for the endpoint
	// (OPTIONS /api/environment)
	OptionsEnvironment(ctx context.Context, request OptionsEnvironmentRequestObject) (OptionsEnvironmentResponseObject, error)
	// Create a new environment
	// (POST /api/environment)
	CreateEnvironment(ctx context.Context, request CreateEnvironmentRequestObject) (CreateEnvironmentResponseObject, error)
	// Delete an environment
	// (DELETE /api/environment/{environment_name})
	DeleteEnvironment(ctx context.Context, request DeleteEnvironmentRequestObject) (DeleteEnvironmentResponseObject, error)
	// Check the options for the endpoint
	// (OPTIONS /api/environment/{environment_name})
	OptionsEnvironmentName(ctx context.Context, request OptionsEnvironmentNameRequestObject) (OptionsEnvironmentNameResponseObject, error)
	// Get flags by environment
	// (GET /api/environment/{environment_name}/flag)
	GetFlagsByEnvironment(ctx context.Context, request GetFlagsByEnvironmentRequestObject) (GetFlagsByEnvironmentResponseObject, error)
	// Check the options for the endpoint
	// (OPTIONS /api/environment/{environment_name}/flag)
	OptionsEnvironmentNameFlag(ctx context.Context, request OptionsEnvironmentNameFlagRequestObject) (OptionsEnvironmentNameFlagResponseObject, error)
	// Check the options for the endpoint
	// (OPTIONS /api/environment/{environment_name}/flag/{flag_id})
	OptionsEnvironmentNameFlagId(ctx context.Context, request OptionsEnvironmentNameFlagIdRequestObject) (OptionsEnvironmentNameFlagIdResponseObject, error)
	// Update a flag in an environment
	// (PUT /api/environment/{environment_name}/flag/{flag_id})
	UpdateEnvironmentFlagValue(ctx context.Context, request UpdateEnvironmentFlagValueRequestObject) (UpdateEnvironmentFlagValueResponseObject, error)
	// Get bulk list of flags
	// (GET /api/flag)
	BulkFlags(ctx context.Context, request BulkFlagsRequestObject) (BulkFlagsResponseObject, error)
	// Check the options for the endpoint
	// (OPTIONS /api/flag)
	OptionsFlag(ctx context.Context, request OptionsFlagRequestObject) (OptionsFlagResponseObject, error)
	// Create a new flag
	// (POST /api/flag)
	CreateFlag(ctx context.Context, request CreateFlagRequestObject) (CreateFlagResponseObject, error)
	// Delete a flag
	// (DELETE /api/flag/{flag_id})
	DeleteFlag(ctx context.Context, request DeleteFlagRequestObject) (DeleteFlagResponseObject, error)
	// Check the options for the endpoint
	// (OPTIONS /api/flag/{flag_id})
	OptionsFlagId(ctx context.Context, request OptionsFlagIdRequestObject) (OptionsFlagIdResponseObject, error)
	// Update a flag
	// (PUT /api/flag/{flag_id})
	UpdateFlag(ctx context.Context, request UpdateFlagRequestObject) (UpdateFlagResponseObject, error)
	// Get health status
	// (GET /healthcheck)
	HealthCheck(ctx context.Context, request HealthCheckRequestObject) (HealthCheckResponseObject, error)
	// Check the options for the endpoint
	// (OPTIONS /healthcheck)
	OptionsHealthCheck(ctx context.Context, request OptionsHealthCheckRequestObject) (OptionsHealthCheckResponseObject, error)
	// Check the options for the endpoint
	// (OPTIONS /ui/flag)
	UIOptionsCreateSingleFlag(ctx context.Context, request UIOptionsCreateSingleFlagRequestObject) (UIOptionsCreateSingleFlagResponseObject, error)
	// create a single flag
	// (POST /ui/flag)
	UICreateSingleFlag(ctx context.Context, request UICreateSingleFlagRequestObject) (UICreateSingleFlagResponseObject, error)
	// delete a single flag
	// (DELETE /ui/flag/{flag_id})
	UIKillSingleFlag(ctx context.Context, request UIKillSingleFlagRequestObject) (UIKillSingleFlagResponseObject, error)
	// Check the options for the endpoint
	// (OPTIONS /ui/flag/{flag_id})
	UIOptionsSingleFlag(ctx context.Context, request UIOptionsSingleFlagRequestObject) (UIOptionsSingleFlagResponseObject, error)
	// update a single flag
	// (POST /ui/flag/{flag_id})
	UIUpdateSingleFlag(ctx context.Context, request UIUpdateSingleFlagRequestObject) (UIUpdateSingleFlagResponseObject, error)
	// Get bulk list of flags
	// (GET /ui/flags)
	UIFindBulkFlags(ctx context.Context, request UIFindBulkFlagsRequestObject) (UIFindBulkFlagsResponseObject, error)
	// Check the options for the endpoint
	// (OPTIONS /ui/flags)
	UIOptionsFindBulkFlags(ctx context.Context, request UIOptionsFindBulkFlagsRequestObject) (UIOptionsFindBulkFlagsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListEnvironments operation middleware
func (sh *strictHandler) ListEnvironments(w http.ResponseWriter, r *http.Request, params ListEnvironmentsParams) {
	var request ListEnvironmentsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListEnvironments(ctx, request.(ListEnvironmentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListEnvironments")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListEnvironmentsResponseObject); ok {
		if err := validResponse.VisitListEnvironmentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// OptionsEnvironment operation middleware
func (sh *strictHandler) OptionsEnvironment(w http.ResponseWriter, r *http.Request) {
	var request OptionsEnvironmentRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OptionsEnvironment(ctx, request.(OptionsEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OptionsEnvironment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OptionsEnvironmentResponseObject); ok {
		if err := validResponse.VisitOptionsEnvironmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateEnvironment operation middleware
func (sh *strictHandler) CreateEnvironment(w http.ResponseWriter, r *http.Request) {
	var request CreateEnvironmentRequestObject

	var body CreateEnvironmentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateEnvironment(ctx, request.(CreateEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateEnvironment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateEnvironmentResponseObject); ok {
		if err := validResponse.VisitCreateEnvironmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteEnvironment operation middleware
func (sh *strictHandler) DeleteEnvironment(w http.ResponseWriter, r *http.Request, environmentName EnvironmentName) {
	var request DeleteEnvironmentRequestObject

	request.EnvironmentName = environmentName

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteEnvironment(ctx, request.(DeleteEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteEnvironment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteEnvironmentResponseObject); ok {
		if err := validResponse.VisitDeleteEnvironmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// OptionsEnvironmentName operation middleware
func (sh *strictHandler) OptionsEnvironmentName(w http.ResponseWriter, r *http.Request, environmentName EnvironmentName) {
	var request OptionsEnvironmentNameRequestObject

	request.EnvironmentName = environmentName

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OptionsEnvironmentName(ctx, request.(OptionsEnvironmentNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OptionsEnvironmentName")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OptionsEnvironmentNameResponseObject); ok {
		if err := validResponse.VisitOptionsEnvironmentNameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFlagsByEnvironment operation middleware
func (sh *strictHandler) GetFlagsByEnvironment(w http.ResponseWriter, r *http.Request, environmentName EnvironmentName) {
	var request GetFlagsByEnvironmentRequestObject

	request.EnvironmentName = environmentName

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFlagsByEnvironment(ctx, request.(GetFlagsByEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFlagsByEnvironment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFlagsByEnvironmentResponseObject); ok {
		if err := validResponse.VisitGetFlagsByEnvironmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// OptionsEnvironmentNameFlag operation middleware
func (sh *strictHandler) OptionsEnvironmentNameFlag(w http.ResponseWriter, r *http.Request, environmentName EnvironmentName) {
	var request OptionsEnvironmentNameFlagRequestObject

	request.EnvironmentName = environmentName

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OptionsEnvironmentNameFlag(ctx, request.(OptionsEnvironmentNameFlagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OptionsEnvironmentNameFlag")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OptionsEnvironmentNameFlagResponseObject); ok {
		if err := validResponse.VisitOptionsEnvironmentNameFlagResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// OptionsEnvironmentNameFlagId operation middleware
func (sh *strictHandler) OptionsEnvironmentNameFlagId(w http.ResponseWriter, r *http.Request, environmentName EnvironmentName, flagId FlagId) {
	var request OptionsEnvironmentNameFlagIdRequestObject

	request.EnvironmentName = environmentName
	request.FlagId = flagId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OptionsEnvironmentNameFlagId(ctx, request.(OptionsEnvironmentNameFlagIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OptionsEnvironmentNameFlagId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OptionsEnvironmentNameFlagIdResponseObject); ok {
		if err := validResponse.VisitOptionsEnvironmentNameFlagIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateEnvironmentFlagValue operation middleware
func (sh *strictHandler) UpdateEnvironmentFlagValue(w http.ResponseWriter, r *http.Request, environmentName EnvironmentName, flagId FlagId) {
	var request UpdateEnvironmentFlagValueRequestObject

	request.EnvironmentName = environmentName
	request.FlagId = flagId

	var body UpdateEnvironmentFlagValueJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateEnvironmentFlagValue(ctx, request.(UpdateEnvironmentFlagValueRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateEnvironmentFlagValue")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateEnvironmentFlagValueResponseObject); ok {
		if err := validResponse.VisitUpdateEnvironmentFlagValueResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// BulkFlags operation middleware
func (sh *strictHandler) BulkFlags(w http.ResponseWriter, r *http.Request, params BulkFlagsParams) {
	var request BulkFlagsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.BulkFlags(ctx, request.(BulkFlagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "BulkFlags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(BulkFlagsResponseObject); ok {
		if err := validResponse.VisitBulkFlagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// OptionsFlag operation middleware
func (sh *strictHandler) OptionsFlag(w http.ResponseWriter, r *http.Request) {
	var request OptionsFlagRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OptionsFlag(ctx, request.(OptionsFlagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OptionsFlag")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OptionsFlagResponseObject); ok {
		if err := validResponse.VisitOptionsFlagResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateFlag operation middleware
func (sh *strictHandler) CreateFlag(w http.ResponseWriter, r *http.Request) {
	var request CreateFlagRequestObject

	var body CreateFlagJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateFlag(ctx, request.(CreateFlagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateFlag")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateFlagResponseObject); ok {
		if err := validResponse.VisitCreateFlagResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFlag operation middleware
func (sh *strictHandler) DeleteFlag(w http.ResponseWriter, r *http.Request, flagId FlagId) {
	var request DeleteFlagRequestObject

	request.FlagId = flagId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFlag(ctx, request.(DeleteFlagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFlag")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteFlagResponseObject); ok {
		if err := validResponse.VisitDeleteFlagResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// OptionsFlagId operation middleware
func (sh *strictHandler) OptionsFlagId(w http.ResponseWriter, r *http.Request, flagId FlagId) {
	var request OptionsFlagIdRequestObject

	request.FlagId = flagId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OptionsFlagId(ctx, request.(OptionsFlagIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OptionsFlagId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OptionsFlagIdResponseObject); ok {
		if err := validResponse.VisitOptionsFlagIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateFlag operation middleware
func (sh *strictHandler) UpdateFlag(w http.ResponseWriter, r *http.Request, flagId FlagId) {
	var request UpdateFlagRequestObject

	request.FlagId = flagId

	var body UpdateFlagJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateFlag(ctx, request.(UpdateFlagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateFlag")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateFlagResponseObject); ok {
		if err := validResponse.VisitUpdateFlagResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// HealthCheck operation middleware
func (sh *strictHandler) HealthCheck(w http.ResponseWriter, r *http.Request) {
	var request HealthCheckRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.HealthCheck(ctx, request.(HealthCheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HealthCheck")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HealthCheckResponseObject); ok {
		if err := validResponse.VisitHealthCheckResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// OptionsHealthCheck operation middleware
func (sh *strictHandler) OptionsHealthCheck(w http.ResponseWriter, r *http.Request) {
	var request OptionsHealthCheckRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OptionsHealthCheck(ctx, request.(OptionsHealthCheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OptionsHealthCheck")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OptionsHealthCheckResponseObject); ok {
		if err := validResponse.VisitOptionsHealthCheckResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UIOptionsCreateSingleFlag operation middleware
func (sh *strictHandler) UIOptionsCreateSingleFlag(w http.ResponseWriter, r *http.Request) {
	var request UIOptionsCreateSingleFlagRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UIOptionsCreateSingleFlag(ctx, request.(UIOptionsCreateSingleFlagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UIOptionsCreateSingleFlag")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UIOptionsCreateSingleFlagResponseObject); ok {
		if err := validResponse.VisitUIOptionsCreateSingleFlagResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UICreateSingleFlag operation middleware
func (sh *strictHandler) UICreateSingleFlag(w http.ResponseWriter, r *http.Request) {
	var request UICreateSingleFlagRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UICreateSingleFlag(ctx, request.(UICreateSingleFlagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UICreateSingleFlag")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UICreateSingleFlagResponseObject); ok {
		if err := validResponse.VisitUICreateSingleFlagResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UIKillSingleFlag operation middleware
func (sh *strictHandler) UIKillSingleFlag(w http.ResponseWriter, r *http.Request, flagId FlagId) {
	var request UIKillSingleFlagRequestObject

	request.FlagId = flagId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UIKillSingleFlag(ctx, request.(UIKillSingleFlagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UIKillSingleFlag")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UIKillSingleFlagResponseObject); ok {
		if err := validResponse.VisitUIKillSingleFlagResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UIOptionsSingleFlag operation middleware
func (sh *strictHandler) UIOptionsSingleFlag(w http.ResponseWriter, r *http.Request, flagId FlagId) {
	var request UIOptionsSingleFlagRequestObject

	request.FlagId = flagId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UIOptionsSingleFlag(ctx, request.(UIOptionsSingleFlagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UIOptionsSingleFlag")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UIOptionsSingleFlagResponseObject); ok {
		if err := validResponse.VisitUIOptionsSingleFlagResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UIUpdateSingleFlag operation middleware
func (sh *strictHandler) UIUpdateSingleFlag(w http.ResponseWriter, r *http.Request, flagId FlagId) {
	var request UIUpdateSingleFlagRequestObject

	request.FlagId = flagId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UIUpdateSingleFlag(ctx, request.(UIUpdateSingleFlagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UIUpdateSingleFlag")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UIUpdateSingleFlagResponseObject); ok {
		if err := validResponse.VisitUIUpdateSingleFlagResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UIFindBulkFlags operation middleware
func (sh *strictHandler) UIFindBulkFlags(w http.ResponseWriter, r *http.Request, params UIFindBulkFlagsParams) {
	var request UIFindBulkFlagsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UIFindBulkFlags(ctx, request.(UIFindBulkFlagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UIFindBulkFlags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UIFindBulkFlagsResponseObject); ok {
		if err := validResponse.VisitUIFindBulkFlagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UIOptionsFindBulkFlags operation middleware
func (sh *strictHandler) UIOptionsFindBulkFlags(w http.ResponseWriter, r *http.Request) {
	var request UIOptionsFindBulkFlagsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UIOptionsFindBulkFlags(ctx, request.(UIOptionsFindBulkFlagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UIOptionsFindBulkFlags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UIOptionsFindBulkFlagsResponseObject); ok {
		if err := validResponse.VisitUIOptionsFindBulkFlagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xb3XPbNhL/VzC8m8kLbcnXtDPnt+bDPc/d5TrXOi+djgYilhIaEGAA0Inq0f/ewQKU",
	"SBG0KUeW5ESPFL52F7u//YLukkwVpZIgrUku75KSalqABY1fIG+5VrIAaSeSFuB+Y2AyzUvLlUwuk1/n",
	"QNwIUTmxcyCNFedJmnA3p6R2nqSJ36C7Z5po+FhxDSy5tLqCNDHZHArqDrOL0q0xVnM5S5bLNMm5sKAn",
	"08WksVGXriucRjRkSjNDposmZUjxObnOiVSWlFrdcgYsJVK1ZvmjuJwRbggtS8GBrZj6WIFeRLlKmgww",
	"yGklbHKZJOm93MTF22XjE7dzlHRNNvHbES7x537W8Jq24SncziOYMZbaQdzgxHPygmaW38ILkitNpJJn",
	"DARYYPXUlLwIv/gpRuU2MocK4cenys7PyRtPriFWrU7oYdUTHOfVr0zSBGRVJJe/rX8IFCRpQoVIfr9f",
	"Jn7sYZG4efELdCNbXSAe2WTq7xry5DL522ht9CM/aka5oDNPJNLtvjiLG3wl+ccKCGcgLc856Nr63aoe",
	"s683vM/ac6UL6kTOpf3h5VrHuLQwA42ElXTGJXXETEo6g4msiinoLp0/0xkQP4gqsV7XVowLwtuiPif/",
	"rYwlUyCUlMpwd9ckUNAnaEdJXHsu0qTgkhdOcy4GMWT4nxE9eec5UTnhFgpDSkCWoMPbeyo4I7dUVGCI",
	"ptJN0aogF2cX4/F4g/fxuMN9n4E4quIcjsdpUtDPgccxfg5m2ShtJ9NFl+FflLbOHHIOgiGXCHoNTjsm",
	"wpr27uh+0ctNODVu8AH3anMPn8GYULJo+zh9Un+3HUCmgVpgE+o+qpKtPwJmuI8oYGzKhnENmZdJVESr",
	"8UfIiJrsfhGtD++BRpM1cRG/HI0x1pb1FpuRBYYdWpWgLQccbEiviQpOimeWr29jvXtLrn1rZCUEnQqo",
	"gaezh8MoJABtbAhgulVhG6o1Xbhvj5oPYlkt6bsuHQ2FGcj/sgmrK5X1/KzvQk3/gMy6E5pBGPLRuYNe",
	"4mo/NtCX1BYTDeYiNLfMLEq61kpPpootukTjWNdQ3rqfSQHGOMT0Y1PnQp25cGOqqEb5gzLFmsQ3YaxJ",
	"vT+5tShGfFzWj9P3Jv7ELmoXFtHQk7ZhbMg9kidErWsyUBkiSUJjeUyyu7fCrRV9V2YbTKB9w33atIor",
	"axSeKiWAImL7U9IVt/VPEyN4BuuB1fcfRske7OYyVygmbp2+JO/hMxfkCqitNJArQWfkx5+vneWCNt7s",
	"Ls7H52NHpypB0pInl8l3+FOKsSFqzoiWfLThDGYQSeh+AksoEdxYFwRRIToJnUnwJI2u75oll8l/uLFv",
	"mxqctvLb3+J3u54y6gk2l+nWKzF+2m5dHaQ8YtXabw9YvJGDbrUiqP4WK3ymtfzdab4plTQeQf4xHiMS",
	"KmmDFmBukyFTI9TLy7tGDPIFHnq5TDd06/8h+9JgNYdbl1NXWQbG5JUQiCYvtyTvPqoaDixCy7W8xQje",
	"4QIYSxi11FNwsScKbiSt7Fxp/icwckZuDGiXa7o40g24nC9zOOep+m5PVF0pPeWMgaxJYgo8UXN6Cy4f",
	"KrhxwOMiW+9QSct7IbU/7Inad8qSH7MMSuvcKzkj79Qqx89VJRkpqM3mdQzizYNkmrvcHu/7+z1qnAUt",
	"qSAG9C1o4kMZjNeroqB6EZC0I06FO5hYjYAbApKVikvrdKcywPBe5pB9QI7D2lXSUs8+74D4//zMt638",
	"KoYdbRrCsl6bbrH3+kG6HL+lMhHH9NrrGiUSPrV80qpSZ0rIeM6B+eJch0O/wyaDaP6vQpg7WA3iQfzg",
	"mu2wEKUbi7SnuWBy2bmkHeJXg+CIQjckGZDgywG9J8/oCisimBPA7w/g/7knal8rmQueWXJG3kZt3tkX",
	"GhkVGihbEPjMjafyuKC9D79w2mZ4PrrbzMyWHl9cqhmrUOWW+EFCZQsdpwvCrQntil/bKEQ+cSHIFEhB",
	"9QdghBpSF/unlUWd0FAoB+pY23QCd2Y0pSYCr29waRtet0sDOtloJHx9GSk7NDiq6e/i0MnqB1t90KTD",
	"hXXNG3U0Yih3fCb9JmZxh4zY3vnCxu6tbh+B3zAYHNWlvf7qhRDYIPNn0DoszHphsSPYn8BeuQ1eLZ4a",
	"zZ4gGe+UnAck5shtz002bqql46dU/Vlh+i3fSJt80+IE611YdyDiAaT9nOXQyO6s9FtA99FdeMSAMe+h",
	"JX7NdiDzAZXb8G7jQNeTJmUV8ac32GrBudgewZ7A2qM6ogmXPU62K2W/XUPITsDvQ2d/3zJ+XOFnO9c7",
	"pF6zO+hbn9l17yR0zdq+PTxmO7n25+za/c0Gl4U3isC4caWHcPJKe4g4YmcfEI6usUzGqzMP5x31iyAs",
	"n4gPqyYqXkzqa1YGqM7mdSOCSkbolAtuF+4icUFdwcBVXQh9VYkPGK6fmqyHb7K2jezUnT0V84/ZTyC8",
	"HCDt+9qatA7suwC/9+wwpIPH2qLNw5Ml9Ks9PdoU39qvXsv6HCNFt9gsVfhX1n0N3ZUcdh/QDw/iL/YT",
	"xJ/arF9zm7WBzQfor161DfV5NlaD9TRi9nY1aVAHtY1doVVwzXz/NODZzhunj6ru3VM1ijRK8YZPHdLd",
	"dUgPEExdHXk+/WZlQyHt2HtM9IiC7VEXX6n00Ovi4yYwvTC7iKH8ITsAn0NGXwcsoZ6ir6+qfnoC897i",
	"qA+r5kCFnSNE31sNdQjn5+KfzytTv4L1x3WB6F84GeFyUFbr5wdnsbbI4ywXtCSxd6+4rWifpPlbrUvo",
	"+2H+5jrw4ROEX7icCTj2okkrBwv/Lq//VRzhcCBrDUuw8NmO5rYQbRNY/YsOh6L/TItVi591QWJXovgy",
	"F7grKr6o4PD9k+nJEITMahMwqMgNb1Pdn8NvmsO/uRAtY9htGvB0ZtSflJ/M6IjN6OEywK7I2raHgs1s",
	"dnjTXpXUWqad7jsEeEJQ2FvYsMmaD86fJdw950T6G4a7QjGeL05w1w93VZ0w90Uy5gieEN1cX3HJTg+J",
	"vqmHRLtF8Of+SugbBvGHXgEdCsKHvPrZJ5Qf+pXPKnbdBOtD1O+Wy78CAAD//xZWqwvBVgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
