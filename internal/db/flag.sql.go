// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: flag.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addFlag = `-- name: AddFlag :one
INSERT INTO feature_flag (name, default_value, value_type)
       VALUES ($1, $2, $3)
RETURNING id, name, default_value, value_type, created_at, updated_at, deleted_at
`

type AddFlagParams struct {
	Name         string
	DefaultValue string
	ValueType    FlagType
}

func (q *Queries) AddFlag(ctx context.Context, arg AddFlagParams) (FeatureFlag, error) {
	row := q.db.QueryRow(ctx, addFlag, arg.Name, arg.DefaultValue, arg.ValueType)
	var i FeatureFlag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DefaultValue,
		&i.ValueType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getFlags = `-- name: GetFlags :many
SELECT feature_flag.id, feature_flag.name, feature_flag.default_value, feature_flag.value_type, feature_flag.created_at, feature_flag.updated_at, feature_flag.deleted_at, 
       environment.id, environment.name, environment.created_at, environment.updated_at, environment.deleted_at,
       feature_flag_value.feature_flag_id, feature_flag_value.environment_id, feature_flag_value.value, feature_flag_value.updated_at, feature_flag_value.deleted_at
FROM feature_flag
JOIN feature_flag_value ON feature_flag.id = feature_flag_value.feature_flag_id
JOIN environment ON environment.id = feature_flag_value.environment_id
WHERE feature_flag.deleted_at IS NULL
  AND environment.deleted_at IS NULL
  AND feature_flag_value.deleted_at IS NULL
`

type GetFlagsRow struct {
	FeatureFlag      FeatureFlag
	Environment      Environment
	FeatureFlagValue FeatureFlagValue
}

func (q *Queries) GetFlags(ctx context.Context) ([]GetFlagsRow, error) {
	rows, err := q.db.Query(ctx, getFlags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFlagsRow
	for rows.Next() {
		var i GetFlagsRow
		if err := rows.Scan(
			&i.FeatureFlag.ID,
			&i.FeatureFlag.Name,
			&i.FeatureFlag.DefaultValue,
			&i.FeatureFlag.ValueType,
			&i.FeatureFlag.CreatedAt,
			&i.FeatureFlag.UpdatedAt,
			&i.FeatureFlag.DeletedAt,
			&i.Environment.ID,
			&i.Environment.Name,
			&i.Environment.CreatedAt,
			&i.Environment.UpdatedAt,
			&i.Environment.DeletedAt,
			&i.FeatureFlagValue.FeatureFlagID,
			&i.FeatureFlagValue.EnvironmentID,
			&i.FeatureFlagValue.Value,
			&i.FeatureFlagValue.UpdatedAt,
			&i.FeatureFlagValue.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pageFlags = `-- name: PageFlags :many
SELECT feature_flag.id, feature_flag.name, feature_flag.default_value, feature_flag.value_type, feature_flag.created_at, feature_flag.updated_at, feature_flag.deleted_at, 
       environment.id, environment.name, environment.created_at, environment.updated_at, environment.deleted_at,
       feature_flag_value.feature_flag_id, feature_flag_value.environment_id, feature_flag_value.value, feature_flag_value.updated_at, feature_flag_value.deleted_at
FROM feature_flag
JOIN feature_flag_value ON feature_flag.id = feature_flag_value.feature_flag_id
JOIN environment ON environment.id = feature_flag_value.environment_id
WHERE feature_flag.deleted_at IS NULL
  AND environment.deleted_at IS NULL
  AND feature_flag_value.deleted_at IS NULL
ORDER BY $1
LIMIT $3 OFFSET $2
`

type PageFlagsParams struct {
	Sort pgtype.Text
	Page int64
	Size int64
}

type PageFlagsRow struct {
	FeatureFlag      FeatureFlag
	Environment      Environment
	FeatureFlagValue FeatureFlagValue
}

func (q *Queries) PageFlags(ctx context.Context, arg PageFlagsParams) ([]PageFlagsRow, error) {
	rows, err := q.db.Query(ctx, pageFlags, arg.Sort, arg.Page, arg.Size)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PageFlagsRow
	for rows.Next() {
		var i PageFlagsRow
		if err := rows.Scan(
			&i.FeatureFlag.ID,
			&i.FeatureFlag.Name,
			&i.FeatureFlag.DefaultValue,
			&i.FeatureFlag.ValueType,
			&i.FeatureFlag.CreatedAt,
			&i.FeatureFlag.UpdatedAt,
			&i.FeatureFlag.DeletedAt,
			&i.Environment.ID,
			&i.Environment.Name,
			&i.Environment.CreatedAt,
			&i.Environment.UpdatedAt,
			&i.Environment.DeletedAt,
			&i.FeatureFlagValue.FeatureFlagID,
			&i.FeatureFlagValue.EnvironmentID,
			&i.FeatureFlagValue.Value,
			&i.FeatureFlagValue.UpdatedAt,
			&i.FeatureFlagValue.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
