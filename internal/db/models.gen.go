// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type FlagType string

const (
	FlagTypeBoolean      FlagType = "boolean"
	FlagTypeString       FlagType = "string"
	FlagTypeInteger      FlagType = "integer"
	FlagTypeJson         FlagType = "json"
	FlagTypeStringArray  FlagType = "string_array"
	FlagTypeIntegerArray FlagType = "integer_array"
)

func (e *FlagType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FlagType(s)
	case string:
		*e = FlagType(s)
	default:
		return fmt.Errorf("unsupported scan type for FlagType: %T", src)
	}
	return nil
}

type NullFlagType struct {
	FlagType FlagType
	Valid    bool // Valid is true if FlagType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFlagType) Scan(value interface{}) error {
	if value == nil {
		ns.FlagType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FlagType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFlagType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FlagType), nil
}

type Environment struct {
	ID        int32
	Name      string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	DeletedAt pgtype.Timestamptz
}

type FeatureFlag struct {
	ID           int32
	Name         string
	DefaultValue string
	ValueType    FlagType
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
	DeletedAt    pgtype.Timestamptz
}

type FeatureFlagValue struct {
	FeatureFlagID int32
	EnvironmentID int32
	Value         string
	UpdatedAt     pgtype.Timestamptz
	DeletedAt     pgtype.Timestamptz
}
