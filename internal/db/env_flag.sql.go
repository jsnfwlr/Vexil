// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: env_flag.sql

package db

import (
	"context"
)

const getFlagsByEnvironmentName = `-- name: GetFlagsByEnvironmentName :many
SELECT feature_flag.id, feature_flag.name, feature_flag.default_value, feature_flag.value_type, feature_flag.created_at, feature_flag.updated_at, feature_flag.deleted_at, 
       environment.id, environment.name, environment.created_at, environment.updated_at, environment.deleted_at,
       feature_flag_value.feature_flag_id, feature_flag_value.environment_id, feature_flag_value.value, feature_flag_value.updated_at, feature_flag_value.deleted_at
FROM feature_flag
JOIN feature_flag_value ON feature_flag.id = feature_flag_value.feature_flag_id
JOIN environment ON environment.id = feature_flag_value.environment_id
WHERE feature_flag.deleted_at IS NULL
  AND environment.deleted_at IS NULL
  AND feature_flag_value.deleted_at IS NULL
  AND environment.name = $1
`

type GetFlagsByEnvironmentNameRow struct {
	FeatureFlag      FeatureFlag
	Environment      Environment
	FeatureFlagValue FeatureFlagValue
}

func (q *Queries) GetFlagsByEnvironmentName(ctx context.Context, environmentName string) ([]GetFlagsByEnvironmentNameRow, error) {
	rows, err := q.db.Query(ctx, getFlagsByEnvironmentName, environmentName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFlagsByEnvironmentNameRow
	for rows.Next() {
		var i GetFlagsByEnvironmentNameRow
		if err := rows.Scan(
			&i.FeatureFlag.ID,
			&i.FeatureFlag.Name,
			&i.FeatureFlag.DefaultValue,
			&i.FeatureFlag.ValueType,
			&i.FeatureFlag.CreatedAt,
			&i.FeatureFlag.UpdatedAt,
			&i.FeatureFlag.DeletedAt,
			&i.Environment.ID,
			&i.Environment.Name,
			&i.Environment.CreatedAt,
			&i.Environment.UpdatedAt,
			&i.Environment.DeletedAt,
			&i.FeatureFlagValue.FeatureFlagID,
			&i.FeatureFlagValue.EnvironmentID,
			&i.FeatureFlagValue.Value,
			&i.FeatureFlagValue.UpdatedAt,
			&i.FeatureFlagValue.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setEnvFlagToDefault = `-- name: SetEnvFlagToDefault :exec
INSERT INTO feature_flag_value (environment_id, feature_flag_id, value)
SELECT id as environment_id, $1 as flag_id, $2 as value FROM environment
`

type SetEnvFlagToDefaultParams struct {
	FlagID       int32
	DefaultValue string
}

func (q *Queries) SetEnvFlagToDefault(ctx context.Context, arg SetEnvFlagToDefaultParams) error {
	_, err := q.db.Exec(ctx, setEnvFlagToDefault, arg.FlagID, arg.DefaultValue)
	return err
}
